import netius as netius

import typing

class BaseAdapter:
    def set(self, value: typing.Any, owner: str = ...) -> None: ...
    def get(self, key: str) -> str | netius.legacy.StringIO: ...
    def get_file(self, key: str, mode: str = ...) -> netius.legacy.StringIO: ...
    def delete(self, key: str, owner: str = ...) -> None: ...
    def append(self, key:str , value: typing.Any) -> None: ...
    def truncate(self, key:str , count: int) -> None: ...
    def size(self, key:str ) -> int: ...
    def sizes(self, owner: str | None = ...) -> list[int]: ...
    def total(self, owner: str | None = ...) -> int: ...
    def reserve(self, owner: str = ...) -> None: ...
    def count(self, owner: str | None = ...) -> int: ...
    def list(self, owner: str | None = ...) -> tuple[()]: ...
    def generate(self) -> str: ...

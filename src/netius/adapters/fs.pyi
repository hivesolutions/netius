import netius as netius
import netius.adapters.base
import netius.adapters.base as base

import typing

class FsAdapter(netius.adapters.base.BaseAdapter):
    def __init__(self, base_path: str | None = ...) -> None: ...
    def set(self, value: typing.Any, owner: str = ...) -> str: ...
    def get_file(self, key: str, mode: str = ...) -> netius.legacy.StringIO: ...
    def delete(self, key: str, owner: str = ...) -> None: ...
    def size(self, key:str ) -> int: ...
    def count(self, owner: str | None = ...) -> int: ...
    def list(self, owner: str | None = ...) -> list[str]: ...
    def _path(self, owner: str | None = ...) -> str: ...
    def _ensure(self, owner: str) -> str: ...
    def _symlink(self, source: typing.StrOrBytesPath, target: typing.StrOrBytesPath) -> None: ...

import netius.base.legacy as legacy

from typing import Any

FILE_NAME: str
FILE_TEMPLATE: str
HOME_FILE: str
IMPORT_NAMES: tuple[str]
CASTS: dict
ENV_ENCODINGS: tuple[str]
CONFIGS: dict
CONFIG_F: list
HOMES: list

def conf(
    name: Any,
    default: Any | None = None,
    cast: Any | None = None,
    ctx: Any | None = None
) -> Any: ...
def conf_prefix(prefix, ctx: dict | None = ...) -> dict: ...
def conf_suffix(suffix, ctx: dict | None = ...) -> dict:  ...
def conf_s(name, value, ctx: dict | None = ...) -> None: ...
def conf_r(name, ctx: dict | None = ...) -> None: ...
def conf_d(ctx: dict | None = ...) -> (Any | None): ...
def conf_ctx() -> dict[str, dict]: ...
def load(
    names: tuple[str] = ...,
    path: str | None = ...,
    encoding: str = ...,
    ctx: dict | None = ...
) -> None: ...
def load_file(
    name: str = ...,
    path: str | None = ...,
    encoding: str = ...,
    ctx: dict | None = ...
) -> None: ...
def load_env(ctx: dict | None = ...) -> None: ...
def get_homes(
    file_path: str = ...,
    default: str = ...,
    encoding: str = ...,
    force_default: bool = ...
) -> list[str]: ...
def _cast_r(cast: Any) -> (Any | None): ...
def _load_includes(
    base_path: str,
    config: dict,
    encoding: str = ...
) -> None: ...
def _is_valid(key: str) -> bool: ...
def _is_devel() -> bool: ...
def _is_secure() -> bool: ...

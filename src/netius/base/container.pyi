from typing import Any

from .common import Base
from .server import StreamServer

class Container(Base):
    owner: Base | None
    bases: list[Base]

    def __init__(self, *args, **kwargs): ...
    def start(self, owner: Base) -> None: ...
    def cleanup(self) -> None: ...
    def loop(self) -> None: ...
    def ticks(self) -> None: ...
    def connections_dict(self, full: bool = ...) -> dict[str, Any]: ...
    def connection_dict(self, id: str, full: bool = ...) -> dict[str, Any] | None: ...
    def on_start(self) -> None: ...
    def on_stop(self) -> None: ...
    def add_base(self, base: Base) -> None: ...
    def remove_base(self, base: Base) -> None: ...
    def start_base(self, base: Base) -> None: ...
    def start_all(self) -> None: ...
    def apply_all(self) -> None: ...
    def apply_base(self, base: Base) -> None: ...
    def call_all(self, name: str, *args, **kwargs) -> None: ...
    def trigger_all(self, name: str, *args, **kwargs) -> None: ...

class ContainerServer(StreamServer):
    container: Container

    def __init__(self, *args, **kwargs): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def cleanup(self) -> None: ...
    def add_base(self, base: Base) -> None: ...

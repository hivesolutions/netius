from typing import Any

class Poll:
    timeout: float

    def __init__(self): ...
    @classmethod
    def name(cls) -> str: ...
    @classmethod
    def test(cls) -> bool: ...
    def open(self, timeout: float = ...) -> None: ...
    def close(self) -> None: ...
    def poll(self) -> tuple[list[Any], list[Any], list[Any]]: ...
    def poll_owner(self) -> dict[Any, tuple[list[Any], list[Any], list[Any]]]: ...
    def is_open(self) -> bool: ...
    def is_edge(self) -> bool: ...
    def is_empty(self) -> bool: ...
    def sub_all(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_all(self, socket: Any) -> None: ...
    def is_sub_read(self, socket: Any) -> bool: ...
    def is_sub_write(self, socket: Any) -> bool: ...
    def is_sub_error(self, socket: Any) -> bool: ...
    def sub_read(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_write(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_error(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_read(self, socket: Any) -> None: ...
    def unsub_write(self, socket: Any) -> None: ...
    def unsub_error(self, socket: Any) -> None: ...

class EpollPoll(Poll):
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def test(cls) -> bool: ...
    def open(self, timeout: float = ...) -> None: ...
    def close(self) -> None: ...
    def poll(self) -> tuple[list[Any], list[Any], list[Any]]: ...
    def is_edge(self) -> bool: ...
    def sub_read(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_write(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_error(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_read(self, socket: Any) -> None: ...
    def unsub_write(self, socket: Any) -> None: ...
    def unsub_error(self, socket: Any) -> None: ...

class KqueuePoll(Poll):
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def test(cls) -> bool: ...
    def open(self, timeout: float = ...) -> None: ...
    def close(self) -> None: ...
    def poll(self) -> tuple[list[Any], list[Any], list[Any]]: ...
    def is_edge(self) -> bool: ...
    def sub_read(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_write(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_error(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_read(self, socket: Any) -> None: ...
    def unsub_write(self, socket: Any) -> None: ...
    def unsub_error(self, socket: Any) -> None: ...

class PollPoll(Poll):
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def test(cls) -> bool: ...
    def open(self, timeout: float = ...) -> None: ...
    def close(self) -> None: ...
    def poll(self) -> tuple[list[Any], list[Any], list[Any]]: ...
    def is_edge(self) -> bool: ...
    def sub_read(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_write(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_error(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_read(self, socket: Any) -> None: ...
    def unsub_write(self, socket: Any) -> None: ...
    def unsub_error(self, socket: Any) -> None: ...

class SelectPoll(Poll):
    def __init__(self, *args, **kwargs): ...
    def open(self, timeout: float = ...) -> None: ...
    def close(self) -> None: ...
    def poll(self) -> tuple[list[Any], list[Any], list[Any]]: ...
    def is_edge(self) -> bool: ...
    def sub_read(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_write(self, socket: Any, owner: Any | None = ...) -> None: ...
    def sub_error(self, socket: Any, owner: Any | None = ...) -> None: ...
    def unsub_read(self, socket: Any) -> None: ...
    def unsub_write(self, socket: Any) -> None: ...
    def unsub_error(self, socket: Any) -> None: ...

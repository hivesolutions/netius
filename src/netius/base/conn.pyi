import netius.base.config as config
import netius.base.legacy as legacy
import netius.base.observer
import netius.base.observer as observer
import netius.base.tls as tls

from typing import Any, Literal

OPEN: int
CLOSED: int
PENDING: int
CHUNK_SIZE: int

class BaseConnection(netius.base.observer.Observable):
    def __init__(
        self,
        owner: Any | None = ...,
        socket: Any | None = ...,
        address: Any | None = ...,
        datagram: bool = ...,
        ssl: bool = ...,
        max_pending: int = ...,
        min_pending: int = ...,
    ) -> None: ...
    def destroy(self) -> None: ...
    def open(self, connect: bool = ...) -> None: ...
    def close(self, flush: bool = ..., destroy: bool = ...) -> None: ...
    def close_flush(self) -> None: ...
    def upgrade(self, key_file: Any | None = ..., cer_file: Any | None = ..., ca_file: Any | None = ..., server: bool = ...) -> None: ...
    def set_connecting(self) -> None: ...
    def set_connected(self) -> None: ...
    def set_upgraded(self) -> None: ...
    def set_data(self, data: Any, address: Any | None = ...) -> None: ...
    def ensure_write(self, flush: bool = ...) -> (Any | None): ...
    def remove_write(self) -> None: ...
    def enable_read(self) -> None: ...
    def disable_read(self) -> None: ...
    def send(self, data: Any, address: Any | None = ..., delay: bool = ..., force: bool = ..., callback: Any | None = ...) -> int: ...
    def recv(self, size: int = ..., force: bool = ...) -> (Any | Literal[b""]): ...
    def pend(self, data: Any, back: bool = ...) -> None: ...
    def restore(self, data: Any, back: bool = ...) -> None: ...
    def run_starter(self) -> bool: ...
    def end_starter(self) -> None: ...
    def add_starter(self, starter: Any, back: bool = ...) -> None: ...
    def remove_starter(self, starter: Any) -> None: ...
    def info_dict(self, full: bool = ...) -> dict[str, Any | None]: ...
    def ssl_certificate(self, binary: bool = ...) -> (Any | None): ...
    def ssl_verify_host(self, host: Any | None = ...) -> None: ...
    def ssl_verify_fingerprint(self, fingerprint: Any | None = ...) -> None: ...
    def ssl_dump_certificate(self, dump: bool = ...) -> None: ...
    def ssl_protocol(self) -> (Any | None): ...
    def ssl_alpn_protocol(self) -> (Any | None): ...
    def ssl_npn_protocol(self) -> (Any | None): ...
    def is_open(self) -> bool: ...
    def is_closed(self) -> bool: ...
    def is_pending(self) -> bool: ...
    def is_connected(self) -> bool: ...
    def is_connecting(self) -> bool: ...
    def is_upgrading(self) -> bool: ...
    def is_throttleable(self) -> bool: ...
    def is_exhausted(self) -> bool: ...
    def is_restored(self) -> bool: ...
    def is_pending_data(self) -> bool: ...
    def _send(self) -> None: ...
    def _recv(self, size: Any) -> Any: ...  
    def _recv_ssl(self, size: Any) -> (Any | bytes): ...
    def _recv_restored(self, size: Any) -> (Any | Literal[b""]): ...
    def _shutdown(self, close: bool = ..., force: bool = ..., ignore: bool = ...) -> None: ...
    def _close_callback(self, connection: Any) -> None: ...
    def _flush_write(self) -> None: ...

class DiagConnection(BaseConnection):
    def __init__(self, *args, **kwargs) -> None: ...
    def recv(self, *args, **kwargs) -> (Any | Literal[b""]): ...
    def send(self, data, *args, **kwargs) -> int: ...
    def info_dict(self, full: bool = ...) -> dict[str, Any | None]: ...
    def _uptime(self) -> Any: ...
    def _resolve(self, address) -> (Any | None): ...

is_diag: bool

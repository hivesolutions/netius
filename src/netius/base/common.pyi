from typing import Any, Callable, Iterable
import threading

class BaseThread(threading.Thread):
    def __init__(
        self, owner: Any | None = ..., daemon: bool = ..., *args, **kwargs
    ): ...
    def run(self) -> None: ...

def new_loop_main(
    factory: type | None = ..., env: bool = ..., _compat: bool | None = ..., **kwargs
) -> Any: ...
def new_loop_asyncio(**kwargs) -> Any | None: ...
def new_loop(
    factory: type | None = ...,
    _compat: bool | None = ...,
    asyncio: bool | None = ...,
    **kwargs
) -> Any: ...
def ensure_main(factory: type | None = ..., env: bool = ..., **kwargs) -> None: ...
def ensure_asyncio(**kwargs) -> Any | None: ...
def ensure_loop(
    factory: type | None = ..., asyncio: bool | None = ..., **kwargs
) -> None: ...
def get_main(factory: type | None = ..., ensure: bool = ..., **kwargs) -> Any: ...
def get_loop(
    factory: type | None = ...,
    ensure: bool = ...,
    _compat: bool | None = ...,
    asyncio: bool | None = ...,
    **kwargs
) -> Any: ...
def get_event_loop(*args, **kwargs) -> Any: ...
def stop_loop(compat: bool = ..., asyncio: bool = ...) -> None: ...
def compat_loop(loop: Any) -> Any: ...
def get_poll() -> Any: ...
def build_future(compat: bool = ..., asyncio: bool = ...) -> Any: ...
def ensure(
    coroutine: Callable[..., Any],
    args: Iterable[Any] | None = ...,
    kwargs: dict | None = ...,
    thread: bool | None = ...,
) -> Any: ...
def ensure_pool(
    coroutine: Callable[..., Any],
    args: Iterable[Any] | None = ...,
    kwargs: dict | None = ...,
) -> Any: ...

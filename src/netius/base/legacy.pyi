from legacy import ArgSpec

from typing import Any, AnyStr, Iterable, Literal, LiteralString, OpenerDirector, ParseResult, ModuleType

PYTHON_3: bool
PYTHON_35: bool
PYTHON_36: bool
PYTHON_39: bool
PYTHON_ASYNC: bool
PYTHON_ASYNC_GEN: bool
PYTHON_V: int
OLD_UNICODE: None
STRINGS: tuple
ALL_STRINGS: tuple
INTEGERS: tuple

def with_meta(meta: Any, *bases: Any) -> None: ...
def eager(iterable: Iterable[Any]) -> list: ...
def iteritems(associative: dict) -> Iterable[tuple]: ...
def iterkeys(associative: dict) -> Iterable: ...
def itervalues(associative: dict) -> Iterable: ...
def items(associative: dict) -> list[tuple]: ...
def keys(associative: dict) -> list: ...
def values(associative: dict) -> list: ...
def xrange(start: int, stop: int = ..., step: int = ...) -> Iterable[int]: ...
def range(start: int, stop: int = ..., step: int = ...) -> list[int]: ...
def ord(value: str) -> int: ...
def chr(value: int) -> str: ...
def chri(value: int) -> str: ...
def bytes(value: Any, encoding: str = ..., errors: str = ..., force: bool = ...) -> bytes: ...
def str(value: Any, encoding: str = ..., errors: str = ..., force: bool = ...) -> str: ...
def u(value: Any, encoding: str = ..., errors: str = ..., force: bool = ...) -> str: ...
def ascii(value: Any, encoding: str = ..., errors: str = ...) -> str: ...
def orderable(value: Any) -> Orderable: ...
def is_str(value: Any) -> bool: ...
def is_unicode(value: Any) -> bool: ...
def is_bytes(value: Any) -> bool: ...
def is_string(value: Any, all: bool = ...) -> bool: ...
def is_generator(value: Any) -> bool: ...
def is_async_generator(value: Any) -> bool: ...
def is_unittest(name: str = ...) -> bool: ...
def execfile(path: str, global_vars: dict, local_vars: dict = ..., encoding: str = ...) -> None: ...
def walk(path: str, visit: Any, arg: Any) -> None: ...
def getargspec(func: Any) -> ArgSpec: ...
def has_module(name: str) -> bool: ...
def new_module(name: str) -> (ModuleType | Any): ...
def reduce(*args, **kwargs) -> (Any | object): ...
def reload(*args, **kwargs) -> ModuleType: ...
def unichr(*args, **kwargs) -> str: ...
def urlopen(*args, **kwargs) -> (Any | None): ...
def build_opener(*args, **kwargs) -> OpenerDirector: ...
def urlparse(*args, **kwargs) -> (Any | ParseResult): ...
def urlunparse(*args, **kwargs) -> (bytes | Any | LiteralString | Literal['']): ...
def parse_qs(*args, **kwargs) -> dict[AnyStr@parse_qs, list[AnyStr@parse_qs]]: ...
def urlencode(*args, **kwargs) -> str: ...
def quote(*args, **kwargs) -> str: ...
def quote_plus(*args, **kwargs) -> str: ...
def unquote(*args, **kwargs) -> str: ...
def unquote_plus(*args, **kwargs) -> str: ...
def cmp_to_key(*args, **kwargs) -> dict: ...
def tobytes(self, *args, **kwargs) -> bytes: ...
def tostring(self, *args, **kwargs) -> str: ...
def StringIO(*args, **kwargs) -> StringIO: ...
def BytesIO(*args, **kwargs) -> BytesIO: ...

class Orderable(tuple):
    def __cmp__(self, value: tuple) -> int: ...
    def __lt__(self, value: tuple) -> bool: ...

from os import PathLike
from typing import Any, Literal, Mapping, NoReturn

HashType = Literal["plain", "md5", "sha1", "sha256", "sha512"]

class Auth:
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def auth(cls, *args, **kwargs) -> bool: ...
    @classmethod
    def meta(cls, *args, **kwargs) -> Mapping[str, Any]: ...
    @classmethod
    def auth_assert(cls, *args, **kwargs) -> NoReturn: ...
    @classmethod
    def verify(cls, encoded: str, decoded: str) -> bool: ...
    @classmethod
    def generate(cls, password: str, type: HashType = ..., salt: str = ...) -> str: ...
    @classmethod
    def unpack(cls, password) -> tuple[HashType, str | None, str, str | None]: ...
    @classmethod
    def get_file(
        cls, path: PathLike[str], cache: bool = ..., encoding: str | None = ...
    ) -> str | bytes: ...
    @classmethod
    def is_simple(cls) -> bool: ...
    def auth_i(self, *args, **kwargs) -> bool: ...
    def auth_assert_i(self, *args, **kwargs) -> NoReturn: ...
    def is_simple_i(self) -> bool: ...

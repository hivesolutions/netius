import netius as netius

from typing import Any, Literal, NoReturn, PathLike, Unbound

class Auth:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def auth(cls, *args, **kwargs) -> NoReturn: ...
    @classmethod
    def meta(cls, *args, **kwargs) -> dict: ...
    @classmethod
    def auth_assert(cls, *args, **kwargs) -> None: ...
    @classmethod
    def verify(cls, encoded: str, decoded: str) -> bool: ...
    @classmethod
    def generate(cls, password: str, type: str = ..., salt: str = ...) -> str: ...
    @classmethod
    def unpack(cls, password) -> tuple[Any | Literal["plain"], bytes | Any | str | None, Any | None, Unbound | Any | None]: ...
    @classmethod
    def get_file(cls, path: PathLike[str], cache: bool = ..., encoding: str | None = ...) -> (Any | str | bytes): ...
    @classmethod
    def is_simple(cls) -> Literal[False]: ...
    def auth_i(self, *args, **kwargs) -> NoReturn: ...
    def auth_assert_i(self, *args, **kwargs) -> None: ...
    def is_simple_i(self) -> Literal[False]: ...

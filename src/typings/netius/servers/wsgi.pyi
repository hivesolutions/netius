import netius as netius
import netius.servers.http as http
import netius.servers.http2
import netius.servers.http2 as http2

__version__: str
__revision__: str
__date__: str
SERVER_SOFTWARE: str
COMPRESSED_LIMIT: int

class WSGIServer(netius.servers.http2.HTTP2Server):
    def __init__(self, app, mount: str = ..., decode: bool = ..., compressed_limit: int = ..., *args, **kwargs) -> None: ...
    def on_connection_d(self, connection): ...
    def on_serve(self): ...
    def on_data_http(self, connection, parser): ...
    def on_environ(self, connection, environ): ...
    def _next_queue(self, connection): ...
    def _start_response(self, connection, status, headers): ...
    def _send_part(self, connection): ...
    def _final(self, connection): ...
    def _close(self, connection): ...
    def _release(self, connection): ...
    def _release_future(self, connection): ...
    def _release_iterator(self, connection): ...
    def _release_environ(self, connection): ...
    def _release_parser(self, connection): ...
    def _release_queue(self, connection): ...
    def _decode(self, value): ...

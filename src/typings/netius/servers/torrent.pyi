import netius as netius
import netius.base.container
import netius.base.observer
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
REFRESH_TIME: float
ID_STRING: str
BLOCK_SIZE: int
THRESHOLD_END: int
MAX_MISSING: int
PEER_PATHS: tuple

class Pieces(netius.base.observer.Observable):
    def __init__(self, length, number_pieces, number_blocks) -> None: ...
    def piece(self, index): ...
    def piece_blocks(self, index): ...
    def piece_size(self, index): ...
    def block(self, index, begin): ...
    def block_size(self, index, begin): ...
    def pop_block(self, bitfield, mark: bool = ...): ...
    def push_block(self, index, begin): ...
    def mark_piece(self, index, value: bool = ...): ...
    def mark_block(self, index, begin, value: bool = ...): ...
    def update_block(self, index, mark: bool = ...): ...
    def update_piece(self, index): ...
    def _and(self, first, second): ...
    @property
    def total_pieces(self): ...
    @property
    def marked_pieces(self): ...
    @property
    def missing_pieces(self): ...
    @property
    def total_blocks(self): ...
    @property
    def marked_blocks(self): ...
    @property
    def missing_blocks(self): ...

class TorrentTask(netius.base.observer.Observable):
    def __init__(self, owner, target_path, torrent_path: Incomplete | None = ..., info_hash: Incomplete | None = ...) -> None: ...
    def load(self): ...
    def unload(self): ...
    def on_close(self, connection): ...
    def ticks(self): ...
    def refresh(self): ...
    def on_choked(self, connection): ...
    def on_unchoked(self, connection): ...
    def on_block(self, pieces, index, begin): ...
    def on_piece(self, pieces, index): ...
    def on_complete(self, pieces): ...
    def on_dht(self, response): ...
    def on_tracker(self, client, parser, result): ...
    def load_info(self, torrent_path): ...
    def load_file(self): ...
    def load_single(self): ...
    def load_multiple(self): ...
    def unload_file(self): ...
    def load_pieces(self): ...
    def unload_pieces(self): ...
    def pieces_tracker(self): ...
    def set_data(self, data, index, begin): ...
    def write_data(self, data, offset): ...
    def set_dht(self, peer_t, port): ...
    def peers_dht(self): ...
    def peers_tracker(self): ...
    def peers_file(self): ...
    def connect_peers(self): ...
    def disconnect_peers(self): ...
    def connect_peer(self, peer): ...
    def info_string(self): ...
    def left(self): ...
    def speed(self): ...
    def speed_s(self): ...
    def percent(self): ...
    def pop_block(self, bitfield): ...
    def push_block(self, index, begin): ...
    def verify_piece(self, index): ...
    def confirm_piece(self, index): ...
    def refute_piece(self, index): ...
    def extend_peers(self, peers): ...
    def add_peer(self, peer): ...
    def remove_peer(self, peer): ...
    def _is_single(self): ...
    def _verify_piece(self, index, file): ...

class TorrentServer(netius.base.container.ContainerServer):
    def __init__(self, *args, **kwargs) -> None: ...
    def cleanup(self): ...
    def ticks(self): ...
    def download(self, target_path, torrent_path: Incomplete | None = ..., info_hash: Incomplete | None = ..., close: bool = ...): ...
    def add_task(self, task): ...
    def remove_task(self, task): ...
    def cleanup_tasks(self): ...
    def _generate_id(self): ...

import netius as netius
import netius.servers.http as http
import netius.servers.http2
import netius.servers.http2 as http2

__version__: str
__revision__: str
__date__: str
BUFFER_RATIO: float
MIN_RATIO: float
MAX_PENDING: int

class ProxyConnection(netius.servers.http2.HTTP2Connection):
    def open(self, *args, **kwargs): ...
    def resolve_encoding(self, parser): ...
    def set_h2(self): ...
    def on_headers(self): ...
    def on_partial(self, data): ...
    def on_available(self): ...
    def on_unavailable(self): ...

class ProxyServer(netius.servers.http2.HTTP2Server):
    def __init__(self, dynamic: bool = ..., throttle: bool = ..., trust_origin: bool = ..., max_pending: int = ..., *args, **kwargs) -> None: ...
    def start(self): ...
    def stop(self): ...
    def cleanup(self): ...
    def info_dict(self, full: bool = ...): ...
    def connections_dict(self, full: bool = ..., parent: bool = ...): ...
    def connection_dict(self, id, full: bool = ...): ...
    def on_data(self, connection, data): ...
    def on_connection_d(self, connection): ...
    def on_stream_d(self, stream): ...
    def on_serve(self): ...
    def on_data_http(self, connection, parser): ...
    def on_headers(self, connection, parser): ...
    def on_partial(self, connection, parser, data): ...
    def on_available(self, connection, parser): ...
    def on_unavailable(self, connection, parser): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def _throttle(self, _connection): ...
    def _prx_close(self, connection): ...
    def _prx_keep(self, connection): ...
    def _prx_throttle(self, connection): ...
    def _raw_throttle(self, connection): ...
    def _on_prx_headers(self, client, parser, headers): ...
    def _on_prx_message(self, client, parser, message): ...
    def _on_prx_partial(self, client, parser, data): ...
    def _on_prx_connect(self, client, _connection): ...
    def _on_prx_acquire(self, client, _connection): ...
    def _on_prx_close(self, client, _connection): ...
    def _on_prx_error(self, client, _connection, error): ...
    def _on_raw_connect(self, client, _connection): ...
    def _on_raw_data(self, client, _connection, data): ...
    def _on_raw_close(self, client, _connection): ...
    def _apply_headers(self, parser, connection, parser_prx, headers, upper: bool = ...): ...
    def _apply_via(self, parser_prx, headers): ...

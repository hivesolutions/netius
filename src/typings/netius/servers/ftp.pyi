import netius as netius
import netius.base.conn
import netius.base.container
import netius.base.server
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
BUFFER_SIZE: int
CAPABILITIES: tuple
PERMISSIONS: dict
TYPES: dict

class FTPConnection(netius.base.conn.BaseConnection):
    def __init__(self, base_path: str = ..., host: str = ..., mode: str = ..., *args, **kwargs) -> None: ...
    def open(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def parse(self, data): ...
    def send_ftp(self, code, message: str = ..., lines: tuple = ..., simple: bool = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def send_ftp_base(self, code, message: str = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def send_ftp_lines(self, code, message: str = ..., lines: tuple = ..., simple: bool = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def ready(self): ...
    def ok(self): ...
    def not_ok(self): ...
    def flush_ftp(self): ...
    def data_ftp(self, data): ...
    def closed_ftp(self): ...
    def flush_list(self): ...
    def flush_retr(self): ...
    def flush_stor(self): ...
    def on_flush_list(self, connection): ...
    def on_flush_retr(self, connection): ...
    def on_line(self, code, message, is_final: bool = ...): ...
    def on_user(self, message): ...
    def on_syst(self, message): ...
    def on_feat(self, message): ...
    def on_opts(self, message): ...
    def on_pwd(self, message): ...
    def on_type(self, message): ...
    def on_pasv(self, message): ...
    def on_port(self, message): ...
    def on_dele(self, message): ...
    def on_mkd(self, message): ...
    def on_rmd(self, message): ...
    def on_rnfr(self, message): ...
    def on_rnto(self, message): ...
    def on_cdup(self, message): ...
    def on_cwd(self, message): ...
    def on_size(self, message): ...
    def on_mdtm(self, message): ...
    def on_noop(self, message): ...
    def on_quit(self, message): ...
    def on_list(self, message): ...
    def on_retr(self, message): ...
    def on_stor(self, message): ...
    def _file_send(self, connection): ...
    def _file_finish(self, connection): ...
    def _data_open(self): ...
    def _data_close(self): ...
    def _list(self): ...
    def _to_unix(self, mode): ...
    def _get_path(self, extra: Incomplete | None = ...): ...

class FTPDataServer(netius.base.server.StreamServer):
    def __init__(self, connection, container, *args, **kwargs) -> None: ...
    def on_connection_c(self, connection): ...
    def on_connection_d(self, connection): ...
    def on_data(self, connection, data): ...
    def send_ftp(self, data, delay: bool = ..., force: bool = ..., callback: Incomplete | None = ...): ...
    def flush_ftp(self): ...
    def close_ftp(self): ...

class FTPServer(netius.base.container.ContainerServer):
    def __init__(self, base_path: str = ..., auth_s: str = ..., *args, **kwargs) -> None: ...
    def serve(self, host: str = ..., port: int = ..., *args, **kwargs): ...
    def on_connection_c(self, connection): ...
    def on_data(self, connection, data): ...
    def on_serve(self): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def on_line_ftp(self, connection, code, message): ...

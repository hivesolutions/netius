"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
BUFFER_SIZE = ...
CAPABILITIES = ...
PERMISSIONS = ...
TYPES = ...
class FTPConnection(netius.Connection):
    def __init__(self, base_path=..., host=..., mode=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def parse(self, data): # -> int:
        ...
    
    def send_ftp(self, code, message=..., lines=..., simple=..., delay=..., callback=...): # -> int:
        ...
    
    def send_ftp_base(self, code, message=..., delay=..., callback=...): # -> int:
        ...
    
    def send_ftp_lines(self, code, message=..., lines=..., simple=..., delay=..., callback=...): # -> int:
        ...
    
    def ready(self): # -> None:
        ...
    
    def ok(self): # -> None:
        ...
    
    def not_ok(self): # -> None:
        ...
    
    def flush_ftp(self): # -> None:
        ...
    
    def data_ftp(self, data): # -> None:
        ...
    
    def closed_ftp(self): # -> None:
        ...
    
    def flush_list(self): # -> None:
        ...
    
    def flush_retr(self): # -> None:
        ...
    
    def flush_stor(self): # -> None:
        ...
    
    def on_flush_list(self, connection): # -> None:
        ...
    
    def on_flush_retr(self, connection): # -> None:
        ...
    
    def on_line(self, code, message, is_final=...): # -> None:
        ...
    
    def on_user(self, message): # -> None:
        ...
    
    def on_syst(self, message): # -> None:
        ...
    
    def on_feat(self, message): # -> None:
        ...
    
    def on_opts(self, message): # -> None:
        ...
    
    def on_pwd(self, message): # -> None:
        ...
    
    def on_type(self, message): # -> None:
        ...
    
    def on_pasv(self, message): # -> None:
        ...
    
    def on_port(self, message): # -> None:
        ...
    
    def on_dele(self, message): # -> None:
        ...
    
    def on_mkd(self, message): # -> None:
        ...
    
    def on_rmd(self, message): # -> None:
        ...
    
    def on_rnfr(self, message): # -> None:
        ...
    
    def on_rnto(self, message): # -> None:
        ...
    
    def on_cdup(self, message): # -> None:
        ...
    
    def on_cwd(self, message): # -> None:
        ...
    
    def on_size(self, message): # -> None:
        ...
    
    def on_mdtm(self, message): # -> None:
        ...
    
    def on_noop(self, message): # -> None:
        ...
    
    def on_quit(self, message): # -> None:
        ...
    
    def on_list(self, message): # -> None:
        ...
    
    def on_retr(self, message): # -> None:
        ...
    
    def on_stor(self, message): # -> None:
        ...
    


class FTPDataServer(netius.StreamServer):
    def __init__(self, connection, container, *args, **kwargs) -> None:
        ...
    
    def on_connection_c(self, connection): # -> None:
        ...
    
    def on_connection_d(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def send_ftp(self, data, delay=..., force=..., callback=...):
        ...
    
    def flush_ftp(self): # -> None:
        ...
    
    def close_ftp(self): # -> None:
        ...
    


class FTPServer(netius.ContainerServer):
    """
    Abstract ftp server implementation that handles authentication
    and file system based file serving.

    Note that the ftp server does not support multiple user handling
    and runs only as the user running the current process.

    :see: http://tools.ietf.org/html/rfc959
    """
    def __init__(self, base_path=..., auth_s=..., *args, **kwargs) -> None:
        ...
    
    def serve(self, host=..., port=..., *args, **kwargs): # -> None:
        ...
    
    def on_connection_c(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> FTPConnection:
        ...
    
    def on_line_ftp(self, connection, code, message): # -> None:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
INITIAL_STATE = ...
HELO_STATE = ...
HEADER_STATE = ...
DATA_STATE = ...
USERNAME_STATE = ...
PASSWORD_STATE = ...
TERMINATION_SIZE = ...
CAPABILITIES = ...
class SMTPConnection(netius.Connection):
    def __init__(self, host=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def parse(self, data): # -> int | None:
        ...
    
    def send_smtp(self, code, message=..., lines=..., delay=..., callback=...): # -> int:
        ...
    
    def send_smtp_base(self, code, message=..., delay=..., callback=...): # -> int:
        ...
    
    def send_smtp_lines(self, code, message=..., lines=..., delay=..., callback=...): # -> int:
        ...
    
    def ready(self): # -> None:
        ...
    
    def helo(self, host): # -> None:
        ...
    
    def ehlo(self, host): # -> None:
        ...
    
    def starttls(self): # -> None:
        ...
    
    def auth(self, method, data): # -> None:
        ...
    
    def auth_plain(self, data): # -> None:
        ...
    
    def auth_login(self, data): # -> None:
        ...
    
    def data(self): # -> None:
        ...
    
    def queued(self, index=...): # -> None:
        ...
    
    def bye(self): # -> None:
        ...
    
    def ok(self): # -> None:
        ...
    
    def not_implemented(self): # -> None:
        ...
    
    def on_username(self, data): # -> None:
        ...
    
    def on_password(self, data): # -> None:
        ...
    
    def on_raw_data(self, data): # -> None:
        ...
    
    def on_line(self, code, message, is_final=...): # -> None:
        ...
    
    def on_helo(self, message): # -> None:
        ...
    
    def on_ehlo(self, message): # -> None:
        ...
    
    def on_starttls(self, message): # -> None:
        ...
    
    def on_auth(self, message): # -> None:
        ...
    
    def on_mail(self, message): # -> None:
        ...
    
    def on_rcpt(self, message): # -> None:
        ...
    
    def on_data(self, message): # -> None:
        ...
    
    def on_quit(self, message): # -> None:
        ...
    
    def assert_s(self, expected): # -> None:
        ...
    
    def to_s(self): # -> LiteralString:
        ...
    
    def received_s(self, for_s=...): # -> str:
        ...
    


class SMTPServer(netius.StreamServer):
    def __init__(self, adapter_s=..., auth_s=..., locals=..., *args, **kwargs) -> None:
        ...
    
    def serve(self, host=..., port=..., *args, **kwargs): # -> None:
        ...
    
    def on_connection_c(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> SMTPConnection:
        ...
    
    def on_line_smtp(self, connection, code, message): # -> None:
        ...
    
    def on_auth_smtp(self, connection, username, password): # -> None:
        ...
    
    def on_header_smtp(self, connection, from_l, to_l): # -> None:
        ...
    
    def on_data_smtp(self, connection, data): # -> None:
        ...
    
    def on_message_smtp(self, connection): # -> None:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

import netius as netius
import netius.base.conn
import netius.base.server
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
INITIAL_STATE: int
HELO_STATE: int
HEADER_STATE: int
DATA_STATE: int
USERNAME_STATE: int
PASSWORD_STATE: int
TERMINATION_SIZE: int
CAPABILITIES: tuple

class SMTPConnection(netius.base.conn.BaseConnection):
    def __init__(self, host: str = ..., *args, **kwargs) -> None: ...
    def open(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def parse(self, data): ...
    def send_smtp(self, code, message: str = ..., lines: tuple = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def send_smtp_base(self, code, message: str = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def send_smtp_lines(self, code, message: str = ..., lines: tuple = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def ready(self): ...
    def helo(self, host): ...
    def ehlo(self, host): ...
    def starttls(self): ...
    def auth(self, method, data): ...
    def auth_plain(self, data): ...
    def auth_login(self, data): ...
    def data(self): ...
    def queued(self, index: int = ...): ...
    def bye(self): ...
    def ok(self): ...
    def not_implemented(self): ...
    def on_username(self, data): ...
    def on_password(self, data): ...
    def on_raw_data(self, data): ...
    def on_line(self, code, message, is_final: bool = ...): ...
    def on_helo(self, message): ...
    def on_ehlo(self, message): ...
    def on_starttls(self, message): ...
    def on_auth(self, message): ...
    def on_mail(self, message): ...
    def on_rcpt(self, message): ...
    def on_data(self, message): ...
    def on_quit(self, message): ...
    def assert_s(self, expected): ...
    def to_s(self): ...
    def received_s(self, for_s: bool = ...): ...

class SMTPServer(netius.base.server.StreamServer):
    def __init__(self, adapter_s: str = ..., auth_s: str = ..., locals: tuple = ..., *args, **kwargs) -> None: ...
    def serve(self, host: str = ..., port: int = ..., *args, **kwargs): ...
    def on_connection_c(self, connection): ...
    def on_data(self, connection, data): ...
    def on_serve(self): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def on_line_smtp(self, connection, code, message): ...
    def on_auth_smtp(self, connection, username, password): ...
    def on_header_smtp(self, connection, from_l, to_l): ...
    def on_data_smtp(self, connection, data): ...
    def on_message_smtp(self, connection): ...
    def _locals(self, sequence, prefix: str = ...): ...
    def _remotes(self, sequence, prefix: str = ...): ...
    def _emails(self, sequence, prefix: str = ...): ...
    def _users(self, emails): ...
    def _is_local(self, email): ...

import netius as netius
import netius.base.conn
import netius.base.server
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
INITIAL_STATE: int
HELO_STATE: int
AUTH_STATE: int
SESSION_STATE: int
CHUNK_SIZE: int
CAPABILITIES: tuple
AUTH_METHODS: tuple

class POPConnection(netius.base.conn.BaseConnection):
    def __init__(self, host: str = ..., *args, **kwargs) -> None: ...
    def open(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def parse(self, data): ...
    def send_pop(self, message: str = ..., lines: tuple = ..., status: str = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def ready(self): ...
    def starttls(self): ...
    def capa(self): ...
    def auth(self): ...
    def accept(self): ...
    def stat(self): ...
    def list(self): ...
    def uidl(self): ...
    def retr(self, index): ...
    def dele(self, index): ...
    def bye(self): ...
    def ok(self): ...
    def not_implemented(self): ...
    def on_line(self, code, message): ...
    def on_stls(self, message): ...
    def on_capa(self, message): ...
    def on_auth(self, message): ...
    def on_stat(self, message): ...
    def on_list(self, message): ...
    def on_uidl(self, message): ...
    def on_retr(self, message): ...
    def on_dele(self, message): ...
    def on_quit(self, message): ...
    def on_user(self, token): ...
    def assert_s(self, expected): ...

class POPServer(netius.base.server.StreamServer):
    def __init__(self, adapter_s: str = ..., auth_s: str = ..., *args, **kwargs) -> None: ...
    def serve(self, host: str = ..., port: int = ..., *args, **kwargs): ...
    def on_connection_c(self, connection): ...
    def on_connection_d(self, connection): ...
    def on_data(self, connection, data): ...
    def on_serve(self): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def on_line_pop(self, connection, code, message): ...
    def on_auth_pop(self, connection, username, password): ...
    def on_stat_pop(self, connection): ...
    def on_list_pop(self, connection): ...
    def on_uidl_pop(self, connection): ...
    def on_retr_pop(self, connection, index): ...
    def on_dele_pop(self, connection, index): ...

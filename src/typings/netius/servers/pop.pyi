"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
INITIAL_STATE = ...
HELO_STATE = ...
AUTH_STATE = ...
SESSION_STATE = ...
CHUNK_SIZE = ...
CAPABILITIES = ...
AUTH_METHODS = ...
class POPConnection(netius.Connection):
    def __init__(self, host=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def parse(self, data): # -> int | None:
        ...
    
    def send_pop(self, message=..., lines=..., status=..., delay=..., callback=...): # -> int:
        ...
    
    def ready(self): # -> None:
        ...
    
    def starttls(self): # -> None:
        ...
    
    def capa(self): # -> None:
        ...
    
    def auth(self): # -> None:
        ...
    
    def accept(self): # -> None:
        ...
    
    def stat(self): # -> None:
        ...
    
    def list(self): # -> None:
        ...
    
    def uidl(self): # -> None:
        ...
    
    def retr(self, index): # -> None:
        ...
    
    def dele(self, index): # -> None:
        ...
    
    def bye(self): # -> None:
        ...
    
    def ok(self): # -> None:
        ...
    
    def not_implemented(self): # -> None:
        ...
    
    def on_line(self, code, message): # -> None:
        ...
    
    def on_stls(self, message): # -> None:
        ...
    
    def on_capa(self, message): # -> None:
        ...
    
    def on_auth(self, message): # -> None:
        ...
    
    def on_stat(self, message): # -> None:
        ...
    
    def on_list(self, message): # -> None:
        ...
    
    def on_uidl(self, message): # -> None:
        ...
    
    def on_retr(self, message): # -> None:
        ...
    
    def on_dele(self, message): # -> None:
        ...
    
    def on_quit(self, message): # -> None:
        ...
    
    def on_user(self, token): # -> None:
        ...
    
    def assert_s(self, expected): # -> None:
        ...
    


class POPServer(netius.StreamServer):
    def __init__(self, adapter_s=..., auth_s=..., *args, **kwargs) -> None:
        ...
    
    def serve(self, host=..., port=..., *args, **kwargs): # -> None:
        ...
    
    def on_connection_c(self, connection): # -> None:
        ...
    
    def on_connection_d(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> POPConnection:
        ...
    
    def on_line_pop(self, connection, code, message): # -> None:
        ...
    
    def on_auth_pop(self, connection, username, password): # -> None:
        ...
    
    def on_stat_pop(self, connection): # -> None:
        ...
    
    def on_list_pop(self, connection): # -> None:
        ...
    
    def on_uidl_pop(self, connection): # -> None:
        ...
    
    def on_retr_pop(self, connection, index): # -> None:
        ...
    
    def on_dele_pop(self, connection, index): # -> None:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

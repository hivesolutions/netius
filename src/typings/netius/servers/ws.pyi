"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class WSConnection(netius.Connection):
    """
    Connection based class for the websockets connection,
    should be able to implement the required encoding
    and decoding techniques in compliance with the websockets
    level 13 specification.

    :see: http://tools.ietf.org/html/rfc6455
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def send_ws(self, data): # -> int:
        ...
    
    def recv_ws(self, size=...): # -> tuple[Any | bytes, Literal[b""]] | tuple[bytes, Any | bytes]:
        ...
    
    def add_buffer(self, data): # -> None:
        ...
    
    def get_buffer(self, delete=...): # -> bytes:
        ...
    
    def do_handshake(self): # -> None:
        ...
    
    def accept_key(self): # -> bytes | str:
        ...
    


class WSServer(netius.StreamServer):
    """
    Base class for the creation of websocket server, should
    handle both the upgrading/handshaking of the connection
    and together with the associated connection class the
    encoding and decoding of the frames.
    """
    MAGIC_VALUE = ...
    def on_data(self, connection, data): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> WSConnection:
        ...
    
    def send_ws(self, connection, data):
        ...
    
    def on_data_ws(self, connection, data): # -> None:
        ...
    
    def on_handshake(self, connection): # -> None:
        ...
    



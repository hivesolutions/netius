"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
GRANTED = ...
REJECTED = ...
FAILED_CLIENT = ...
FAILED_AUTH = ...
GRANTED_EXTRA = ...
BUFFER_RATIO = ...
MIN_RATIO = ...
MAX_PENDING = ...
class SOCKSConnection(netius.Connection):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def send_response(self, status=...): # -> int:
        ...
    
    def send_response_extra(self, status=...): # -> int:
        ...
    
    def send_auth(self, version=..., method=...): # -> int:
        ...
    
    def get_version(self): # -> Any | None:
        ...
    
    def parse(self, data): # -> int | Any:
        ...
    
    def on_data(self): # -> None:
        ...
    
    def on_auth(self): # -> None:
        ...
    


class SOCKSServer(netius.ServerAgent):
    """
    SOCKS base server class to be used as an implementation of the
    RFC 1928 or SOCKSv5 and the SOCKSv4 protocols.

    There are some aspects of the implementation that may not be
    performant driven for readability purposes.
    """
    def __init__(self, rules=..., throttle=..., max_pending=..., *args, **kwargs) -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_data_socks(self, connection, parser): # -> None:
        ...
    
    def on_auth_socks(self, connection, parser): # -> None:
        ...
    
    def on_connection_d(self, connection): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> SOCKSConnection:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

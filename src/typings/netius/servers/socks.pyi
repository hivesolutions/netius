import netius as netius
import netius.base.agent
import netius.base.conn
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
GRANTED: int
REJECTED: int
FAILED_CLIENT: int
FAILED_AUTH: int
GRANTED_EXTRA: int
BUFFER_RATIO: float
MIN_RATIO: float
MAX_PENDING: int

class SOCKSConnection(netius.base.conn.BaseConnection):
    def __init__(self, *args, **kwargs) -> None: ...
    def open(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def send_response(self, status: int = ...): ...
    def send_response_extra(self, status: int = ...): ...
    def send_auth(self, version: Incomplete | None = ..., method: int = ...): ...
    def get_version(self): ...
    def parse(self, data): ...
    def on_data(self): ...
    def on_auth(self): ...

class SOCKSServer(netius.base.agent.ServerAgent):
    def __init__(self, rules: dict = ..., throttle: bool = ..., max_pending: int = ..., *args, **kwargs) -> None: ...
    def cleanup(self): ...
    def on_data(self, connection, data): ...
    def on_data_socks(self, connection, parser): ...
    def on_auth_socks(self, connection, parser): ...
    def on_connection_d(self, connection): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def _throttle(self, _connection): ...
    def _raw_throttle(self, connection): ...
    def _on_raw_connect(self, client, _connection): ...
    def _on_raw_data(self, client, _connection, data): ...
    def _on_raw_close(self, client, _connection): ...

"""
This type stub file was generated by pyright.
"""

import contextlib

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
Z_PARTIAL_FLUSH = ...
ENCODING_MAP = ...
class HTTPConnection(netius.Connection):
    def __init__(self, encoding=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def info_dict(self, full=...): # -> dict[str, Any | None]:
        ...
    
    def flush(self, stream=..., callback=...): # -> None:
        ...
    
    def flush_s(self, stream=..., callback=...): # -> None:
        ...
    
    def send_base(self, data, stream=..., final=..., delay=..., callback=...): # -> int | None:
        ...
    
    def send_plain(self, data, stream=..., final=..., delay=..., callback=...): # -> int:
        ...
    
    def send_chunked(self, data, stream=..., final=..., delay=..., callback=...): # -> int:
        ...
    
    def send_gzip(self, data, stream=..., final=..., delay=..., callback=..., level=...): # -> int:
        ...
    
    def send_response(self, data=..., headers=..., version=..., code=..., code_s=..., apply=..., stream=..., final=..., flush=..., delay=..., callback=...):
        ...
    
    def send_header(self, headers=..., version=..., code=..., code_s=..., stream=..., final=..., delay=..., callback=...): # -> int:
        ...
    
    def send_part(self, data, stream=..., final=..., flush=..., delay=..., callback=...): # -> int | None:
        ...
    
    def parse(self, data): # -> int | Any | None:
        ...
    
    def resolve_encoding(self, parser): # -> None:
        ...
    
    def set_encoding(self, encoding): # -> None:
        ...
    
    def set_uncompressed(self): # -> None:
        ...
    
    def set_plain(self): # -> None:
        ...
    
    def set_chunked(self): # -> None:
        ...
    
    def set_gzip(self): # -> None:
        ...
    
    def set_deflate(self): # -> None:
        ...
    
    def is_plain(self): # -> bool:
        ...
    
    def is_chunked(self): # -> bool:
        ...
    
    def is_gzip(self): # -> bool:
        ...
    
    def is_deflate(self): # -> bool:
        ...
    
    def is_compressed(self): # -> bool:
        ...
    
    def is_uncompressed(self): # -> bool:
        ...
    
    def is_flushed(self): # -> bool:
        ...
    
    def is_measurable(self, strict=...): # -> bool:
        ...
    
    def on_data(self): # -> None:
        ...
    
    @contextlib.contextmanager
    def ctx_request(self, args=..., kwargs=...): # -> Generator[None, Any, None]:
        ...
    
    @property
    def connection_ctx(self): # -> Self:
        ...
    
    @property
    def parser_ctx(self): # -> HTTPParser | None:
        ...
    


class HTTPServer(netius.StreamServer):
    """
    Base class for serving of the HTTP protocol, should contain
    the basic utilities for handling an HTTP request including
    headers and read of data.
    """
    BASE_HEADERS = ...
    def __init__(self, encoding=..., common_log=..., *args, **kwargs) -> None:
        ...
    
    @classmethod
    def build_data(cls, text, url=..., trace=..., style=..., style_urls=..., encode=..., encoding=...): # -> LiteralString | bytes | str:
        ...
    
    @classmethod
    def build_text(cls, text, trace=..., style=..., style_urls=..., encode=..., encoding=...): # -> str | bytes:
        ...
    
    @classmethod
    def build_iframe(cls, text, url, style=..., style_urls=..., encode=..., encoding=...): # -> LiteralString | bytes:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def info_dict(self, full=...): # -> dict[str, str | Any]:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> HTTPConnection:
        ...
    
    def on_data_http(self, connection, parser): # -> None:
        ...
    
    def on_send_http(self, connection, parser, headers=..., version=..., code=..., code_s=...): # -> None:
        ...
    
    def on_flush_http(self, connection, parser, encoding=...): # -> None:
        ...
    
    def authorize(self, connection, parser, auth=..., **kwargs): # -> bool:
        ...
    



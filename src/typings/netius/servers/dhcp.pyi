"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class DHCPRequest:
    options_m = ...
    options_l = ...
    def __init__(self, data) -> None:
        ...
    
    @classmethod
    def generate(cls): # -> None:
        ...
    
    def get_info(self): # -> str:
        ...
    
    def print_info(self): # -> None:
        ...
    
    def parse(self): # -> None:
        ...
    
    def unpack_options(self): # -> None:
        ...
    
    def get_requested(self): # -> str:
        ...
    
    def get_type(self): # -> int:
        ...
    
    def get_type_s(self): # -> str | None:
        ...
    
    def get_mac(self): # -> LiteralString:
        ...
    
    def response(self, yiaddr, options=...): # -> bytes:
        ...
    


class DHCPServer(netius.DatagramServer):
    def serve(self, port=..., type=..., *args, **kwargs): # -> None:
        ...
    
    def on_data(self, address, data): # -> None:
        ...
    
    def on_data_dhcp(self, address, request): # -> None:
        ...
    
    def get_verb(self, type_r): # -> str:
        ...
    
    def send_dhcp(self, data, *args, **kwargs): # -> None:
        ...
    
    def get_type(self, request):
        ...
    
    def get_options(self, request):
        ...
    
    def get_yiaddr(self, request):
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

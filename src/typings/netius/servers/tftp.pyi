"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class TFTPSession:
    def __init__(self, owner, name=..., mode=...) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def next(self, size=..., increment=...): # -> bytes | None:
        ...
    
    def ack(self, size=..., increment=...): # -> bytes | None:
        ...
    
    def increment(self): # -> None:
        ...
    
    def get_info(self): # -> str:
        ...
    
    def print_info(self): # -> None:
        ...
    


class TFTPRequest:
    parsers_m = ...
    parsers_l = ...
    def __init__(self, data, session) -> None:
        ...
    
    @classmethod
    def generate(cls): # -> None:
        ...
    
    def get_info(self): # -> str:
        ...
    
    def print_info(self): # -> None:
        ...
    
    def parse(self): # -> None:
        ...
    
    def get_type(self): # -> Any:
        ...
    
    def get_type_s(self): # -> str | None:
        ...
    
    def response(self, options=...):
        ...
    


class TFTPServer(netius.DatagramServer):
    """
    Abstract trivial ftp server implementation that handles simple
    file system based file serving.

    :see: http://tools.ietf.org/html/rfc1350
    """
    ALLOWED_OPERATIONS = ...
    def __init__(self, base_path=..., *args, **kwargs) -> None:
        ...
    
    def serve(self, port=..., *args, **kwargs): # -> None:
        ...
    
    def on_data(self, address, data): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def on_data_tftp(self, address, request): # -> None:
        ...
    
    def on_error_tftp(self, address, exception): # -> None:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

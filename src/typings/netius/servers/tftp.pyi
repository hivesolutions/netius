import netius as netius
import netius.base.server
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str

class TFTPSession:
    def __init__(self, owner, name: Incomplete | None = ..., mode: Incomplete | None = ...) -> None: ...
    def close(self): ...
    def reset(self): ...
    def next(self, size: int = ..., increment: bool = ...): ...
    def ack(self, size: int = ..., increment: bool = ...): ...
    def increment(self): ...
    def get_info(self): ...
    def print_info(self): ...
    def _get_file(self, allow_absolute: bool = ...): ...

class TFTPRequest:
    parsers_m: ClassVar[None] = ...
    parsers_l: ClassVar[None] = ...
    def __init__(self, data, session) -> None: ...
    @classmethod
    def generate(cls): ...
    def get_info(self): ...
    def print_info(self): ...
    def parse(self): ...
    def get_type(self): ...
    def get_type_s(self): ...
    def response(self, options: dict = ...): ...
    @classmethod
    def _parse_rrq(cls, self): ...
    @classmethod
    def _parse_wrq(cls, self): ...
    @classmethod
    def _parse_data(cls, self): ...
    @classmethod
    def _parse_ack(cls, self): ...
    @classmethod
    def _parse_error(cls, self): ...
    @classmethod
    def _str(cls, data): ...

class TFTPServer(netius.base.server.DatagramServer):
    ALLOWED_OPERATIONS: ClassVar[tuple] = ...
    def __init__(self, base_path: str = ..., *args, **kwargs) -> None: ...
    def serve(self, port: int = ..., *args, **kwargs): ...
    def on_data(self, address, data): ...
    def on_serve(self): ...
    def on_data_tftp(self, address, request): ...
    def on_error_tftp(self, address, exception): ...

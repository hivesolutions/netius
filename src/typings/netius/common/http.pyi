import netius as netius
import netius.common.parser
import netius.common.parser as parser
import netius.common.util as util
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
FILE_LIMIT: int
REQUEST: int
RESPONSE: int
LINE_STATE: int
HEADERS_STATE: int
MESSAGE_STATE: int
FINISH_STATE: int
PLAIN_ENCODING: int
CHUNKED_ENCODING: int
GZIP_ENCODING: int
DEFLATE_ENCODING: int
HTTP_09: int
HTTP_10: int
HTTP_11: int
VERSIONS_MAP: dict
CODE_STRINGS: dict

class HTTPParser(netius.common.parser.Parser):
    FIELDS: ClassVar[tuple] = ...
    def __init__(self, owner, type: int = ..., store: bool = ..., file_limit: int = ...) -> None: ...
    def build(self): ...
    def destroy(self): ...
    def reset(self, type: int = ..., store: bool = ..., file_limit: int = ...): ...
    def clear(self, force: bool = ...): ...
    def close(self): ...
    def get_path(self, normalize: bool = ...): ...
    def get_query(self): ...
    def get_message(self): ...
    def get_message_f(self): ...
    def get_message_b(self, copy: bool = ..., size: int = ...): ...
    def get_headers(self): ...
    def get_encodings(self): ...
    def parse(self, data): ...
    def _parse_line(self, data): ...
    def _parse_headers(self, data): ...
    def _parse_message(self, data): ...
    def _parse_normal(self, data): ...
    def _parse_chunked(self, data): ...
    def _store_data(self, data, memory: bool = ...): ...
    def _parse_query(self, query): ...
    def _decode_params(self, params): ...

class HTTPResponse:
    def __init__(self, data: Incomplete | None = ..., code: int = ..., status: Incomplete | None = ..., headers: Incomplete | None = ...) -> None: ...
    def read(self): ...
    def readline(self): ...
    def close(self): ...
    def getcode(self): ...
    def info(self): ...

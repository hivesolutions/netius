"""
This type stub file was generated by pyright.
"""

from . import parser

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
FILE_LIMIT = ...
REQUEST = ...
RESPONSE = ...
LINE_STATE = ...
HEADERS_STATE = ...
MESSAGE_STATE = ...
FINISH_STATE = ...
PLAIN_ENCODING = ...
CHUNKED_ENCODING = ...
GZIP_ENCODING = ...
DEFLATE_ENCODING = ...
HTTP_09 = ...
HTTP_10 = ...
HTTP_11 = ...
VERSIONS_MAP = ...
CODE_STRINGS = ...
HEADER_NAME_REGEX = ...
class HTTPParser(parser.Parser):
    """
    Parser object for the HTTP format, should be able to
    parse both request and response messages.

    The parser itself should be event driven an callback
    functions should be called upon partials information
    parsing. But the object itself is not thread safe.
    """
    FIELDS = ...
    def __init__(self, owner, type=..., store=..., file_limit=...) -> None:
        ...
    
    def build(self): # -> None:
        """
        Builds the initial set of states ordered according to
        their internal integer definitions, this method provides
        a fast and scalable way of parsing data.
        """
        ...
    
    def destroy(self): # -> None:
        """
        Destroys the current structure for the parser meaning that
        it's restored to the original values, this method should only
        be called on situation where no more parser usage is required.
        """
        ...
    
    def reset(self, type=..., store=..., file_limit=...): # -> None:
        """
        Initializes the state of the parser setting the values
        for the various internal structures to the original value.
        After this operation the parser is ready for a new parse.

        :type type: int
        :param type: The type of HTTP message that is going to be
        parsed using the current parser.
        :type store: bool
        :param store: If the complete message body should be stored
        in memory as the message gets loaded, this option may create
        some serious performance issues.
        :type file_limit: int
        :param file_limit: The maximum content for the payload message
        from which a in file buffer will be used instead of the one that
        is stored in memory (avoid memory starvation).
        """
        ...
    
    def clear(self, force=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def get_path(self, normalize=...): # -> bytes | str:
        """
        Retrieves the path associated with the request, this
        value should be interpreted from the HTTP status line.

        In case the normalize flag is set a possible absolute
        URL value should be normalized into an absolute path.
        This may be required under some proxy related scenarios.

        :type normalize: bool
        :param normalize: If the normalization process should be
        applied for absolute URL scenarios.
        :rtype: String
        :return: The path associated with the current request.
        """
        ...
    
    def get_query(self): # -> bytes | str:
        """
        Retrieves the (GET) query part of the path, this is considered
        to be the part of the path after the first question mark.

        This query string may be used to parse any possible (GET)
        arguments.

        :rtype: String
        :return: The query part of the path, to be used for parsing
        of (GET) arguments.
        """
        ...
    
    def get_message(self): # -> bytes | str:
        """
        Gathers the complete set of message contents for the current
        request/response in parsing. The proper gathering strategy will
        depend on the current strategy (eg: in memory vs file strategies).

        The result of this process is cached meaning that further calls
        to this method will return the same result.

        This method should be used carefully as it may create some memory
        performance issues when retrieving large message values.

        :rtype: String
        :return: The message for the current parsing process as a linear
        string value that may be used as a simple buffer.
        """
        ...
    
    def get_message_f(self): # -> bytes | str:
        ...
    
    def get_message_b(self, copy=..., size=...): # -> BytesIO | StringIO | _TemporaryFileWrapper[bytes]:
        """
        Retrieves a new buffer associated with the currently
        loaded message, the first time this method is called a
        new in memory object will be created for the storage.

        In case the current parsing operation is using a file like
        object for the handling this object it is returned instead.

        The call of this method is only considered to be safe after
        the complete message has been received and processed, otherwise
        and invalid message file structure may be created.

        Note that the returned object will always be set at the
        beginning of the file, so some care should be taken in usage.

        :type copy: bool
        :param copy: If a copy of the file object should be returned
        or if instead the shallow copy associated with the parser should
        be returned instead, this should be used carefully to avoid any
        memory leak from file descriptors.
        :type size: int
        :param size: Size (in bytes) of the buffer to be used in a possible
        copy operation between buffers.
        :rtype: File
        :return: The file like object that may be used to percolate
        over the various parts of the current message contents.
        """
        ...
    
    def get_headers(self): # -> dict[Any, Any]:
        ...
    
    def get_encodings(self): # -> list[Any]:
        ...
    
    def parse(self, data): # -> int | Any:
        """
        Parses the provided data chunk, changing the current
        state of the parser accordingly and returning the
        number of processed bytes from it.

        :type data: String
        :param data: The string containing the data to be parsed
        in the current parse operation.
        :rtype: int
        :return: The amount of bytes of the data string that have
        been "parsed" in the current parse operation.
        """
        ...
    


class HTTPResponse:
    def __init__(self, data=..., code=..., status=..., headers=...) -> None:
        ...
    
    def read(self): # -> None:
        ...
    
    def readline(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def getcode(self): # -> int:
        ...
    
    def info(self): # -> None:
        ...
    



"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
def prime(number_bits):
    """
    Generates a prime number with the given number of bits
    in length. This is a brute force based generation as a
    random number is generated and then tested for primality.

    :type number_bits: int
    :param number_bits: The number of bits to be used in
    the prime number generation.
    :rtype: int
    :return: The generated prime number, that should have
    been verified for primality.
    """
    ...

def is_prime(number): # -> bool:
    ...

def relatively_prime(first, second):
    ...

def gcd(first, second):
    """
    Calculates the greatest common divisor of p value and q value.
    This method uses the classic euclidean algorithm.

    :type first: int
    :param first: The first number to obtain the greatest
    common divisor using the euclidean algorithm.
    :type second: int
    :param second: The second number to obtain the greatest
    common divisor using the euclidean algorithm.
    :rtype: int
    :return: The greatest common divisor between both values.
    :see: http://en.wikipedia.org/wiki/Euclidean_algorithm
    """
    ...

def egcd(first, second): # -> tuple[Any, Literal[1], Literal[0]] | tuple[Any, Any, Any]:
    """
    Extended version of the greatest common divisor created
    by Euclid. Computes additional coefficients of the
    BÃ©zout's identity.

    :type first: int
    :param first: The first number to obtain the greatest
    common divisor using the euclidean algorithm.
    :type second: int
    :param second: The second number to obtain the greatest
    common divisor using the euclidean algorithm.
    :rtype: Tuple
    :return: A tuple containing the various coefficients calculated
    for this extended approach of the greatest common divisor.
    :see: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    """
    ...

def modinv(first, second):
    """
    Uses the extended greatest common divisor algorithm to compute
    the modulus of an inverted value against another.

    The execution of this method is equivalent to (1 / first mod second)
    using mathematical terms.

    :type first: int
    :param first: The first value, that is going to be inverted before
    the modulus operation is performed.
    :type second: int
    :param second: The second value that is going to be used as the basis
    for the modulus operation.
    :rtype: int
    :return: The result of the computation of inverted modulus according
    to its mathematical definition.
    """
    ...

def random_integer_interval(min_value, max_value):
    ...

def random_primality(number, k): # -> bool:
    """
    Uses a probabilistic approach to the testing of primality
    of a number. The resulting value has an error probability
    of (2 ** -k), so a k value should be chosen taking a low
    error as target.

    :type number: int
    :param number: The value that is going to be tested for
    primality.
    :type k: int
    :param k: The coefficient that is going to be used in the
    test, the higher this value is the small the error is.
    :see: http://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test
    """
    ...

def jacobi_witness(x, n): # -> bool:
    """
    Checks if the given x value is witness to n value
    non primality.
    This check is made according to euler's theorem.
    The provided value x is considered to be a witness
    to n in case it is an euler's pseudo-prime with base x

    :type x: int
    :param x: The value to be checked for witness.
    :type n: int
    :param n: The value to be checked for primality.
    :rtype: bool
    :return: The result of the checking, if it passed
    the test or not (is witness or not).
    """
    ...

def jacobi(a, b): # -> int:
    """
    Calculates the value of the jacobi symbol, using the
    given a and b values.

    The possible return values for jacobi symbols are:
    -1, 0 or 1.

    :type a: int
    :param a: The a value of the jacobi symbol.
    :type b: int
    :param b: The b value of the jacobi symbol.
    :rtype: int
    :return: The calculated jacobi symbol, possible values
    are: -1, 0 or 1.
    :see: http://en.wikipedia.org/wiki/Jacobi_symbol
    """
    ...

def ceil_integer(value): # -> int:
    """
    Retrieves the ceil of a value and then converts it
    into a valid integer for integer computation.
    The conversion to integer ensures that the ceil
    is compatible with certain (integer) operations.

    :type value: int
    :param value: The value to apply the ceil and that
    will latter be converted into a valid integer.
    :rtype: int
    :return: The ceil of the given value "casted" as an
    integer to be able to be used in integer math.
    """
    ...


"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
SIZE_UNITS_LIST = ...
SIZE_UNITS_LIST_S = ...
SIZE_UNIT_COEFFICIENT = ...
DEFAULT_MINIMUM = ...
DEFAULT_PLACES = ...
_HOST = ...
def cstring(value):
    ...

def chunks(sequence, count): # -> Generator[Any, Any, None]:
    ...

def header_down(name): # -> LiteralString:
    ...

def header_up(name): # -> LiteralString:
    ...

def is_ip4(address): # -> bool:
    ...

def is_ip6(address): # -> bool:
    ...

def assert_ip4(address, allowed, default=...): # -> bool:
    ...

def in_subnet_ip4(address, subnet): # -> Any:
    ...

def addr_to_ip4(number): # -> str:
    ...

def addr_to_ip6(number): # -> LiteralString:
    ...

def ip4_to_addr(value): # -> int:
    ...

def string_to_bits(value): # -> str:
    ...

def integer_to_bytes(number, length=...): # -> LiteralString | bytes:
    ...

def bytes_to_integer(bytes): # -> int:
    ...

def random_integer(number_bits):
    """
    Generates a random integer of approximately the
    size of the provided number bits bits rounded up
    to whole bytes.

    :type number_bits: int
    :param number_bits: The number of bits of the generated
    random integer, this value will be used as the basis
    for the calculus of the required bytes.
    :rtype: int
    :return: The generated random integer, should be provided
    with the requested size.
    """
    ...

def host(default=...): # -> bytes | str:
    """
    Retrieves the host for the current machine,
    typically this would be the ipv4 address of
    the main network interface.

    No result type are guaranteed and a local address
    (eg: 127.0.0.1) may be returned instead.

    The returned value is cached to avoid multiple
    blocking calls from blocking the processor.

    :type default: String
    :param default: The default value that is going to
    be returned in case no resolution is possible, take
    into account that this result is going to be cached.
    :rtype: Strong
    :return: The string that contains the host address
    as defined by specification for the current machine.
    """
    ...

def hostname(): # -> str:
    """
    The name as a simple string o the name of the current
    local machine. This value may or may not be a fully
    qualified domain name for the machine.

    The result of this function call is unpredictable and
    should not be trusted for critical operations.

    :rtype: String
    :return: The name as a string of the current local
    machine, the definition of this value varies.
    """
    ...

def size_round_unit(size_value, minimum=..., places=..., reduce=..., space=..., justify=..., simplified=..., depth=...):
    """
    Rounds the size unit, returning a string representation
    of the value with a good rounding precision.
    This method should be used to round data sizing units.

    Note that using the places parameter it's possible to control
    the number of digits (including decimal places) of the
    number that is going to be "generated".

    :type size_value: int/float
    :param size_value: The current size value (in bytes).
    :type minimum: int
    :param minimum: The minimum value to be used.
    :type places: int
    :param places: The target number of digits to be used for
    describing the value to be used for output, this is going
    to be used to calculate the proper number of decimal places.
    :type reduce: bool
    :param reduce: If the final string value should be reduced
    meaning that right decimal zeros should be removed as they
    represent an extra unused value.
    :type space: bool
    :param space: If a space character must be used dividing
    the value from the unit symbol.
    :type justify: bool
    :param justify: If the size string value should be (right)
    justified important for properly aligned values in a table.
    :type simplified: bool
    :param simplified: If the simplified version of the units
    should be used instead of the longer one.
    :type depth: int
    :param depth: The current iteration depth value.
    :rtype: String
    :return: The string representation of the data size
    value in a simplified manner (unit).
    """
    ...

def verify(condition, message=..., exception=...): # -> None:
    """
    Ensures that the requested condition returns a valid value
    and if that's no the case an exception raised breaking the
    current execution logic.

    :type condition: bool
    :param condition: The condition to be evaluated and that may
    trigger an exception raising.
    :type message: String
    :param message: The message to be used in the building of the
    exception that is going to be raised in case of condition failure.
    :type exception: Class
    :param exception: The exception class that is going to be used
    to build the exception to be raised in case the condition
    verification operation fails.
    """
    ...

def verify_equal(first, second, message=..., exception=...): # -> None:
    ...

def verify_not_equal(first, second, message=..., exception=...): # -> None:
    ...

def verify_type(value, types, null=..., message=..., exception=..., **kwargs): # -> None:
    ...

def verify_many(sequence, message=..., exception=...): # -> None:
    ...


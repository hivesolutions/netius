import netius as netius
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
SIZE_UNITS_LIST: tuple
SIZE_UNITS_LIST_S: tuple
SIZE_UNIT_COEFFICIENT: int
DEFAULT_MINIMUM: int
DEFAULT_PLACES: int
_HOST: None
def cstring(value): ...
def chunks(sequence, count): ...
def header_down(name): ...
def header_up(name): ...
def is_ip4(address): ...
def is_ip6(address): ...
def assert_ip4(address, allowed, default: bool = ...): ...
def in_subnet_ip4(address, subnet): ...
def addr_to_ip4(number): ...
def addr_to_ip6(number): ...
def ip4_to_addr(value): ...
def string_to_bits(value): ...
def integer_to_bytes(number, length: int = ...): ...
def bytes_to_integer(bytes): ...
def random_integer(number_bits): ...
def host(default: str = ...): ...
def hostname(): ...
def size_round_unit(size_value, minimum: int = ..., places: int = ..., reduce: bool = ..., space: bool = ..., justify: bool = ..., simplified: bool = ..., depth: int = ...): ...
def verify(condition, message: Incomplete | None = ..., exception: Incomplete | None = ...): ...
def verify_equal(first, second, message: Incomplete | None = ..., exception: Incomplete | None = ...): ...
def verify_not_equal(first, second, message: Incomplete | None = ..., exception: Incomplete | None = ...): ...
def verify_type(value, types, null: bool = ..., message: Incomplete | None = ..., exception: Incomplete | None = ..., **kwargs): ...
def verify_many(sequence, message: Incomplete | None = ..., exception: Incomplete | None = ...): ...

import netius as netius
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str

class Auth:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def auth(cls, *args, **kwargs): ...
    @classmethod
    def meta(cls, *args, **kwargs): ...
    @classmethod
    def auth_assert(cls, *args, **kwargs): ...
    @classmethod
    def verify(cls, encoded, decoded): ...
    @classmethod
    def generate(cls, password, type: str = ..., salt: str = ...): ...
    @classmethod
    def unpack(cls, password): ...
    @classmethod
    def get_file(cls, path, cache: bool = ..., encoding: Incomplete | None = ...): ...
    @classmethod
    def is_simple(cls): ...
    def auth_i(self, *args, **kwargs): ...
    def auth_assert_i(self, *args, **kwargs): ...
    def is_simple_i(self): ...

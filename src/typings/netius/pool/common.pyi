import netius as netius
import threading
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
CALLABLE_WORK: int

class Thread(threading.Thread):
    def __init__(self, identifier, owner: Incomplete | None = ..., *args, **kwargs) -> None: ...
    def available(self): ...
    def stop(self): ...
    def run(self): ...
    def tick(self): ...
    def execute(self, work): ...

class ThreadPool:
    def __init__(self, base: type[Thread] = ..., count: int = ...) -> None: ...
    def start(self): ...
    def stop(self, join: bool = ...): ...
    def build(self): ...
    def peek(self): ...
    def pop(self, lock: bool = ...): ...
    def push(self, work, lock: bool = ...): ...
    def push_callable(self, callable): ...

class EventPool(ThreadPool):
    def __init__(self, base: type[Thread] = ..., count: int = ...) -> None: ...
    def stop(self, join: bool = ...): ...
    def push_event(self, event): ...
    def pop_event(self): ...
    def pop_all(self, denotify: bool = ...): ...
    def notify(self): ...
    def denotify(self): ...
    def eventfd(self): ...

class EventFile:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self): ...
    def fileno(self): ...
    def rfileno(self): ...
    def wfileno(self): ...
    def notify(self): ...
    def denotify(self): ...

class UnixEventFile(EventFile):
    _LIBC: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def available(cls): ...
    @classmethod
    def libc(cls): ...
    def close(self): ...
    def notify(self): ...
    def denotify(self): ...
    def _read(self, length: int = ...): ...
    def _write(self, value): ...

class PipeEventFile(EventFile):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def available(cls): ...
    def close(self): ...
    def notify(self): ...
    def denotify(self): ...
    def _read(self, length: int = ...): ...
    def _write(self, data): ...

class SocketEventFile(EventFile):
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self): ...
    def notify(self): ...
    def denotify(self): ...
    def _read(self, length: int = ...): ...
    def _write(self, data): ...

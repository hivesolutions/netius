"""
This type stub file was generated by pyright.
"""

import threading

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
CALLABLE_WORK = ...
class Thread(threading.Thread):
    def __init__(self, identifier, owner=..., *args, **kwargs) -> None:
        ...
    
    @classmethod
    def available(self): # -> Literal[True]:
        ...
    
    def stop(self): # -> None:
        ...
    
    def run(self): # -> None:
        ...
    
    def tick(self): # -> None:
        ...
    
    def execute(self, work): # -> None:
        ...
    


class ThreadPool:
    def __init__(self, base=..., count=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self, join=...): # -> None:
        ...
    
    def build(self): # -> None:
        ...
    
    def peek(self): # -> None:
        ...
    
    def pop(self, lock=...):
        ...
    
    def push(self, work, lock=...): # -> None:
        ...
    
    def push_callable(self, callable): # -> None:
        ...
    


class EventPool(ThreadPool):
    def __init__(self, base=..., count=...) -> None:
        ...
    
    def stop(self, join=...): # -> None:
        ...
    
    def push_event(self, event): # -> None:
        ...
    
    def pop_event(self):
        ...
    
    def pop_all(self, denotify=...): # -> list[Any]:
        ...
    
    def notify(self): # -> None:
        ...
    
    def denotify(self): # -> None:
        ...
    
    def eventfd(self): # -> UnixEventFile | PipeEventFile | SocketEventFile:
        ...
    


class EventFile:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def fileno(self): # -> None:
        ...
    
    def rfileno(self): # -> None:
        ...
    
    def wfileno(self): # -> None:
        ...
    
    def notify(self):
        ...
    
    def denotify(self):
        ...
    


class UnixEventFile(EventFile):
    _LIBC = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def available(cls): # -> bool:
        ...
    
    @classmethod
    def libc(cls): # -> CDLL | None:
        ...
    
    def close(self): # -> None:
        ...
    
    def notify(self): # -> None:
        ...
    
    def denotify(self): # -> None:
        ...
    


class PipeEventFile(EventFile):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def available(cls): # -> bool:
        ...
    
    def close(self): # -> None:
        ...
    
    def notify(self): # -> None:
        ...
    
    def denotify(self): # -> None:
        ...
    


class SocketEventFile(EventFile):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def notify(self): # -> None:
        ...
    
    def denotify(self): # -> None:
        ...
    



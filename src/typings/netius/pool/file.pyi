import netius as netius
import netius.pool.common
import netius.pool.common as common
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
FILE_WORK: int
ERROR_ACTION: int
OPEN_ACTION: int
CLOSE_ACTION: int
READ_ACTION: int
WRITE_ACTION: int

class FileThread(netius.pool.common.Thread):
    def execute(self, work): ...
    def open(self, path, mode, data): ...
    def close(self, file, data): ...
    def read(self, file, count, data): ...
    def write(self, file, buffer, data): ...
    def _execute(self, work): ...

class FilePool(netius.pool.common.EventPool):
    def __init__(self, base: type[FileThread] = ..., count: int = ...) -> None: ...
    def open(self, path, mode: str = ..., data: Incomplete | None = ...): ...
    def close(self, file, data: Incomplete | None = ...): ...
    def read(self, file, count: int = ..., data: Incomplete | None = ...): ...
    def write(self, file, buffer, data: Incomplete | None = ...): ...

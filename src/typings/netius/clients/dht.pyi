import netius as netius
import netius.base.client
import netius.base.request
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str

class DHTRequest(netius.base.request.Request):
    def __init__(self, peer_id, host: str = ..., port: int = ..., type: str = ..., callback: Incomplete | None = ..., *args, **kwargs) -> None: ...
    @classmethod
    def contact(cls, host, port): ...
    def request(self): ...
    def ping(self): ...
    def find_node(self): ...
    def get_peers(self): ...
    def announce_peer(self): ...
    def _get_peer_id(self): ...

class DHTResponse(netius.base.request.Response):
    def __init__(self, data) -> None: ...
    def parse(self): ...
    def get_id(self): ...
    def get_payload(self): ...
    def is_error(self): ...
    def is_response(self): ...

class DHTClient(netius.base.client.DatagramClient):
    def ping(self, host, port, peer_id, *args, **kwargs): ...
    def find_node(self, *args, **kwargs): ...
    def get_peers(self, *args, **kwargs): ...
    def query(self, host: str = ..., port: int = ..., peer_id: Incomplete | None = ..., type: str = ..., callback: Incomplete | None = ..., *args, **kwargs): ...
    def on_data(self, address, data): ...
    def on_data_dht(self, address, response): ...

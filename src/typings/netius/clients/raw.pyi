"""
This type stub file was generated by pyright.
"""

import netius

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class RawProtocol(netius.StreamProtocol):
    def send_basic(self): # -> None:
        """
        Sends a basic HTTP 1.0 request, that can be used to
        run a simple operation on the raw protocol.
        """
        ...
    


class RawClient(netius.ClientAgent):
    protocol = RawProtocol
    @classmethod
    def run_s(cls, host, port=..., loop=..., *args, **kwargs): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    


if __name__ == "__main__":
    def on_open(protocol): # -> None:
        ...
    
    def on_data(protocol, data): # -> None:
        ...
    
    def on_finsh(protocol): # -> None:
        ...
    
else:
    __path__ = ...

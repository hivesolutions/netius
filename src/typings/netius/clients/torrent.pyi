"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
HANDSHAKE_STATE = ...
NORMAL_STATE = ...
CHOKED = ...
UNCHOKED = ...
ALIVE_TIMEOUT = ...
SPEED_LIMIT = ...
BLOCK_SIZE = ...
class TorrentConnection(netius.Connection):
    def __init__(self, max_requests=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def on_close(self, connection): # -> None:
        ...
    
    def on_handshake(self, protocol, reserved, info_hash, peer_id): # -> None:
        ...
    
    def on_message(self, length, type, data): # -> None:
        ...
    
    def parse(self, data): # -> None:
        ...
    
    def handle(self, type, data): # -> None:
        ...
    
    def bitfield_t(self, data): # -> None:
        ...
    
    def choke_t(self, data): # -> None:
        ...
    
    def unchoke_t(self, data): # -> None:
        ...
    
    def piece_t(self, data): # -> None:
        ...
    
    def port_t(self, data): # -> None:
        ...
    
    def next(self, count=...): # -> None:
        ...
    
    def add_request(self, block): # -> None:
        ...
    
    def remove_request(self, block): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def release(self): # -> None:
        ...
    
    def handshake(self): # -> None:
        ...
    
    def keep_alive(self): # -> None:
        ...
    
    def choke(self): # -> None:
        ...
    
    def unchoke(self): # -> None:
        ...
    
    def interested(self): # -> None:
        ...
    
    def not_interested(self): # -> None:
        ...
    
    def have(self, index): # -> None:
        ...
    
    def request(self, index, begin=..., length=...): # -> None:
        ...
    
    def is_alive(self, timeout=..., schedule=...): # -> Callable[[], None]:
        ...
    


class TorrentClient(netius.StreamClient):
    """
    Implementation of the torrent protocol, able to download
    and seed files across a peer to peer mesh network.

    The client provides a series of top level methods that
    provide the main interface with the system.

    The current implementation support both a torrent file
    (using trackers) strategy and also a DHT (distributed
    has table) strategy for completely decentralized usage.

    :see: http://www.bittorrent.org/beps/bep_0003.html
    """
    def peer(self, task, host, port, ssl=..., connection=...):
        ...
    
    def on_connect(self, connection): # -> None:
        ...
    
    def on_acquire(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> TorrentConnection:
        ...
    



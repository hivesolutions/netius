"""
This type stub file was generated by pyright.
"""

import netius

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class APNProtocol(netius.StreamProtocol):
    """
    Protocol class that defines the interface to operate
    an apple push notifications (APN) protocol that is
    able to send push notifications to Apple devices.

    Should be compliant with a simple message oriented
    interface for easy of usage from developers.
    """
    HOST = ...
    PORT = ...
    SANDBOX_HOST = ...
    SANDBOX_PORT = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def connection_made(self, transport): # -> None:
        ...
    
    def send_notification(self, token, message, sound=..., badge=..., close=...): # -> None:
        ...
    
    def set(self, token, message, sound=..., badge=..., sandbox=..., key_file=..., cer_file=..., _close=...): # -> None:
        ...
    
    def notify(self, token, loop=..., **kwargs): # -> tuple[Any | AbstractEventLoop | None, Self]:
        ...
    


class APNClient(netius.ClientAgent):
    protocol = APNProtocol
    @classmethod
    def notify_s(cls, token, loop=..., **kwargs): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    


if __name__ == "__main__":
    def on_finish(protocol): # -> None:
        ...
    
    token = ...
    key_file = ...
    cer_file = ...
else:
    __path__ = ...

import netius as netius
import netius.base.agent
import netius.base.protocol
import netius.base.request
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
DNS_QUERY: int
DNS_RESPONSE: int
DNS_SQUERY: int
DNS_IQUERY: int
DNS_STATUS: int
DNS_AA: int
DNS_TC: int
DNS_RD: int
DNS_TYPES: dict
DNS_CLASSES: dict
DNS_TYPES_R: dict
DNS_CLASSES_R: dict

class DNSRequest(netius.base.request.Request):
    def __init__(self, name, type: str = ..., cls: str = ..., callback: Incomplete | None = ...) -> None: ...
    def request(self): ...
    def _query(self, name, type: str = ..., cls: str = ...): ...
    def _label(self, value): ...

class DNSResponse(netius.base.request.Response):
    def parse(self): ...
    def get_id(self): ...
    def parse_qd(self, data, index): ...
    def parse_an(self, data, index): ...
    def parse_payload(self, data, index, type_s): ...
    def parse_a(self, data, index): ...
    def parse_aaaa(self, data, index): ...
    def parse_mx(self, data, index): ...
    def parse_cname(self, data, index): ...
    def parse_ns(self, data, index): ...
    def parse_ar(self, data, index): ...
    def parse_label(self, data, index): ...
    def parse_pointer(self, data, index): ...
    def parse_ip4(self, data, index): ...
    def parse_ip6(self, data, index): ...
    def parse_byte(self, data, index): ...
    def parse_short(self, data, index): ...
    def parse_long(self, data, index): ...
    def parse_long_long(self, data, index): ...

class DNSProtocol(netius.base.protocol.DatagramProtocol):
    ns_file_l: ClassVar[None] = ...
    @classmethod
    def ns_system(cls, type: str = ...): ...
    @classmethod
    def ns_conf(cls, type: str = ..., force: bool = ...): ...
    @classmethod
    def ns_file(cls, type: str = ..., force: bool = ...): ...
    @classmethod
    def ns_google(cls, type: str = ...): ...
    @classmethod
    def ns_cloudfare(cls, type: str = ...): ...
    def query(self, name, type: str = ..., cls: str = ..., ns: Incomplete | None = ..., callback: Incomplete | None = ...): ...
    def on_data(self, address, data): ...
    def on_data_dns(self, address, response): ...

class DNSClient(netius.base.agent.ClientAgent):
    class protocol(netius.base.protocol.DatagramProtocol):
        ns_file_l: ClassVar[None] = ...
        @classmethod
        def ns_system(cls, type: str = ...): ...
        @classmethod
        def ns_conf(cls, type: str = ..., force: bool = ...): ...
        @classmethod
        def ns_file(cls, type: str = ..., force: bool = ...): ...
        @classmethod
        def ns_google(cls, type: str = ...): ...
        @classmethod
        def ns_cloudfare(cls, type: str = ...): ...
        def query(self, name, type: str = ..., cls: str = ..., ns: Incomplete | None = ..., callback: Incomplete | None = ...): ...
        def on_data(self, address, data): ...
        def on_data_dns(self, address, response): ...
    @classmethod
    def query_s(cls, name, type: str = ..., cls_: str = ..., ns: Incomplete | None = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ...): ...

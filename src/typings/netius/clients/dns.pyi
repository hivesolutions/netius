"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
DNS_QUERY = ...
DNS_RESPONSE = ...
DNS_SQUERY = ...
DNS_IQUERY = ...
DNS_STATUS = ...
DNS_AA = ...
DNS_TC = ...
DNS_RD = ...
DNS_TYPES = ...
DNS_CLASSES = ...
DNS_TYPES_R = ...
DNS_CLASSES_R = ...
class DNSRequest(netius.Request):
    def __init__(self, name, type=..., cls=..., callback=...) -> None:
        ...
    
    def request(self): # -> bytes:
        ...
    


class DNSResponse(netius.Response):
    def parse(self): # -> None:
        ...
    
    def get_id(self): # -> Any:
        ...
    
    def parse_qd(self, data, index): # -> tuple[Any, tuple[bytes, str, str]]:
        ...
    
    def parse_an(self, data, index): # -> tuple[Any, tuple[bytes, str, str, Any, Any]]:
        ...
    
    def parse_payload(self, data, index, type_s): # -> Any:
        ...
    
    def parse_a(self, data, index): # -> tuple[Any, str]:
        ...
    
    def parse_aaaa(self, data, index): # -> tuple[Any, LiteralString]:
        ...
    
    def parse_mx(self, data, index): # -> tuple[Any, tuple[Any, bytes]]:
        ...
    
    def parse_cname(self, data, index): # -> tuple[Any, bytes]:
        ...
    
    def parse_ns(self, data, index): # -> None:
        ...
    
    def parse_ar(self, data, index): # -> None:
        ...
    
    def parse_label(self, data, index): # -> tuple[Any, bytes]:
        ...
    
    def parse_pointer(self, data, index): # -> tuple[Any, Any]:
        ...
    
    def parse_ip4(self, data, index): # -> tuple[Any, str]:
        ...
    
    def parse_ip6(self, data, index): # -> tuple[Any, LiteralString]:
        ...
    
    def parse_byte(self, data, index): # -> tuple[Any, Any]:
        ...
    
    def parse_short(self, data, index): # -> tuple[Any, Any]:
        ...
    
    def parse_long(self, data, index): # -> tuple[Any, Any]:
        ...
    
    def parse_long_long(self, data, index): # -> tuple[Any, Any]:
        ...
    


class DNSProtocol(netius.DatagramProtocol):
    ns_file_l = ...
    @classmethod
    def ns_system(cls, type=...): # -> str | None:
        ...
    
    @classmethod
    def ns_conf(cls, type=..., force=...): # -> list[Any]:
        ...
    
    @classmethod
    def ns_file(cls, type=..., force=...): # -> list[Any] | None:
        ...
    
    @classmethod
    def ns_google(cls, type=...): # -> list[str] | list[Any]:
        ...
    
    @classmethod
    def ns_cloudfare(cls, type=...): # -> list[str] | list[Any]:
        ...
    
    def query(self, name, type=..., cls=..., ns=..., callback=...): # -> None:
        ...
    
    def on_data(self, address, data): # -> None:
        ...
    
    def on_data_dns(self, address, response): # -> None:
        ...
    


class DNSClient(netius.ClientAgent):
    protocol = DNSProtocol
    @classmethod
    def query_s(cls, name, type=..., cls_=..., ns=..., callback=..., loop=...): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    


if __name__ == "__main__":
    def handler(response): # -> None:
        ...
    
    name = ...
    type = ...
    ns = ...
else:
    __path__ = ...

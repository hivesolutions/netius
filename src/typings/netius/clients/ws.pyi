import netius as netius
import netius.base.agent
import netius.base.protocol
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str

class WSProtocol(netius.base.protocol.StreamProtocol):
    MAGIC_VALUE: ClassVar[str] = ...
    @classmethod
    def _key(cls, size: int = ...): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def connection_made(self, transport): ...
    def on_data(self, data): ...
    def on_data_ws(self, data): ...
    def on_handshake(self): ...
    def connect_ws(self, url, callback: Incomplete | None = ..., loop: Incomplete | None = ...): ...
    def send_ws(self, data, callback: Incomplete | None = ...): ...
    def receive_ws(self, decoded): ...
    def add_buffer(self, data): ...
    def get_buffer(self, delete: bool = ...): ...
    def do_handshake(self): ...
    def validate_key(self): ...

class WSClient(netius.base.agent.ClientAgent):
    class protocol(netius.base.protocol.StreamProtocol):
        MAGIC_VALUE: ClassVar[str] = ...
        @classmethod
        def _key(cls, size: int = ...): ...
        def __init__(self, *args, **kwargs) -> None: ...
        def connection_made(self, transport): ...
        def on_data(self, data): ...
        def on_data_ws(self, data): ...
        def on_handshake(self): ...
        def connect_ws(self, url, callback: Incomplete | None = ..., loop: Incomplete | None = ...): ...
        def send_ws(self, data, callback: Incomplete | None = ...): ...
        def receive_ws(self, decoded): ...
        def add_buffer(self, data): ...
        def get_buffer(self, delete: bool = ...): ...
        def do_handshake(self): ...
        def validate_key(self): ...
    @classmethod
    def connect_ws_s(cls, url, callback: Incomplete | None = ..., loop: Incomplete | None = ...): ...

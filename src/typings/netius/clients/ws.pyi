"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class WSProtocol(netius.StreamProtocol):
    """
    Abstract WebSockets protocol to be used for real-time bidirectional
    communication on top of the HTTP protocol.

    :see: https://tools.ietf.org/html/rfc6455
    """
    MAGIC_VALUE = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def connection_made(self, transport): # -> None:
        ...
    
    def on_data(self, data): # -> None:
        ...
    
    def on_data_ws(self, data): # -> None:
        ...
    
    def on_handshake(self): # -> None:
        ...
    
    def connect_ws(self, url, callback=..., loop=...): # -> tuple[Any | AbstractEventLoop | None, Self]:
        ...
    
    def send_ws(self, data, callback=...): # -> int:
        ...
    
    def receive_ws(self, decoded): # -> None:
        ...
    
    def add_buffer(self, data): # -> None:
        ...
    
    def get_buffer(self, delete=...): # -> bytes:
        ...
    
    def do_handshake(self): # -> None:
        ...
    
    def validate_key(self): # -> None:
        ...
    


class WSClient(netius.ClientAgent):
    protocol = WSProtocol
    @classmethod
    def connect_ws_s(cls, url, callback=..., loop=...): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    


if __name__ == "__main__":
    def on_handshake(protocol): # -> None:
        ...
    
    def on_message(protocol, data): # -> None:
        ...
    
    def on_close(protocol): # -> None:
        ...
    
    url = ...
else:
    __path__ = ...

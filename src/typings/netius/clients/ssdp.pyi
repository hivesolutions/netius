import netius as netius
import netius.base.agent
import netius.base.protocol
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str

class SSDPProtocol(netius.base.protocol.DatagramProtocol):
    def on_data(self, address, data): ...
    def on_headers_parser(self): ...
    def discover(self, target, *args, **kwargs): ...
    def method(self, method, target, namespace, mx: int = ..., path: str = ..., params: Incomplete | None = ..., headers: Incomplete | None = ..., data: Incomplete | None = ..., host: str = ..., port: int = ..., version: str = ..., callback: Incomplete | None = ...): ...

class SSDPClient(netius.base.agent.ClientAgent):
    class protocol(netius.base.protocol.DatagramProtocol):
        def on_data(self, address, data): ...
        def on_headers_parser(self): ...
        def discover(self, target, *args, **kwargs): ...
        def method(self, method, target, namespace, mx: int = ..., path: str = ..., params: Incomplete | None = ..., headers: Incomplete | None = ..., data: Incomplete | None = ..., host: str = ..., port: int = ..., version: str = ..., callback: Incomplete | None = ...): ...
    @classmethod
    def discover_s(cls, target, *args, **kwargs): ...
    @classmethod
    def method_s(cls, method, target, namespace, mx: int = ..., path: str = ..., params: Incomplete | None = ..., headers: Incomplete | None = ..., data: Incomplete | None = ..., host: str = ..., port: int = ..., version: str = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ...): ...

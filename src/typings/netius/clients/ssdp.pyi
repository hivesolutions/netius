"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class SSDPProtocol(netius.DatagramProtocol):
    """
    Protocol implementation of the SSDP protocol meant to be
    used under the UPnP standard for discovery and control of
    internet activated devices.

    Using this implementation it should be possible to discover
    and control devices like routes, media centers, etc.

    :see: http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol
    """
    def on_data(self, address, data): # -> None:
        ...
    
    def on_headers_parser(self): # -> None:
        ...
    
    def discover(self, target, *args, **kwargs): # -> None:
        ...
    
    def method(self, method, target, namespace, mx=..., path=..., params=..., headers=..., data=..., host=..., port=..., version=..., callback=...): # -> None:
        ...
    


class SSDPClient(netius.ClientAgent):
    protocol = SSDPProtocol
    @classmethod
    def discover_s(cls, target, *args, **kwargs): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    
    @classmethod
    def method_s(cls, method, target, namespace, mx=..., path=..., params=..., headers=..., data=..., host=..., port=..., version=..., callback=..., loop=...): # -> tuple[Any | AbstractEventLoop | None, protocol]:
        ...
    


if __name__ == "__main__":
    def on_headers(client, parser, headers): # -> None:
        ...
    
    target = ...
else:
    __path__ = ...

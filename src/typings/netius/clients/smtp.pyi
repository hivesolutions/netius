import netius as netius
import netius.base.client
import netius.base.conn
import netius.clients.dns as dns
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
HELO_STATE: int
EHLO_STATE: int
CAPA_STATE: int
STLS_STATE: int
UPGRADE_STATE: int
AUTH_STATE: int
USERNAME_STATE: int
PASSWORD_STATE: int
FROM_STATE: int
TO_STATE: int
DATA_STATE: int
CONTENTS_STATE: int
QUIT_STATE: int
FINAL_STATE: int

class SMTPConnection(netius.base.conn.BaseConnection):
    AUTH_METHODS: ClassVar[tuple] = ...
    def __init__(self, host: str = ..., *args, **kwargs) -> None: ...
    def open(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def build(self): ...
    def destroy(self): ...
    def set_smtp(self, froms, tos, contents, username: Incomplete | None = ..., password: Incomplete | None = ...): ...
    def set_sequence(self, sequence, safe: bool = ...): ...
    def set_message_seq(self, ehlo: bool = ...): ...
    def set_message_stls_seq(self, ehlo: bool = ...): ...
    def set_capabilities(self, capabilities, force: bool = ...): ...
    def next_sequence(self): ...
    def parse(self, data): ...
    def send_smtp(self, code, message: str = ..., delay: bool = ..., callback: Incomplete | None = ...): ...
    def on_line(self, code, message, is_final: bool = ...): ...
    def call(self): ...
    def skip(self): ...
    def helo_t(self): ...
    def ehlo_t(self): ...
    def capa_t(self): ...
    def stls_t(self): ...
    def upgrade_t(self): ...
    def auth_t(self): ...
    def username_t(self): ...
    def password_t(self): ...
    def mail_t(self): ...
    def rcpt_t(self): ...
    def data_t(self): ...
    def contents_t(self): ...
    def quit_t(self): ...
    def close_t(self): ...
    def pass_t(self): ...
    def helo(self, host): ...
    def ehlo(self, host): ...
    def starttls(self): ...
    def auth(self, username, password, method: str = ...): ...
    def auth_plain(self, username, password): ...
    def auth_login(self, username, password): ...
    def login_username(self, username): ...
    def login_password(self, password): ...
    def mail(self, value): ...
    def rcpt(self, value): ...
    def data(self): ...
    def quit(self): ...
    def set_expected(self, expected): ...
    def assert_c(self, code): ...
    def assert_s(self, expected): ...
    def best_auth(self): ...

class SMTPClient(netius.base.client.StreamClient):
    def __init__(self, host: Incomplete | None = ..., auto_close: bool = ..., *args, **kwargs) -> None: ...
    @classmethod
    def message_s(cls, froms, tos, contents, daemon: bool = ..., host: Incomplete | None = ..., mark: bool = ..., callback: Incomplete | None = ...): ...
    def message(self, froms, tos, contents, host: Incomplete | None = ..., port: int = ..., username: Incomplete | None = ..., password: Incomplete | None = ..., ehlo: bool = ..., stls: bool = ..., mark: bool = ..., ensure_loop: bool = ..., callback: Incomplete | None = ...): ...
    def on_connect(self, connection): ...
    def on_upgrade(self, connection): ...
    def on_data(self, connection, data): ...
    def on_connection_d(self, connection): ...
    def build_connection(self, socket, address, ssl: bool = ...): ...
    def mark(self, contents): ...
    def date(self, message): ...
    def user_agent(self, message): ...

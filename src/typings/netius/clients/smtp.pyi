"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
HELO_STATE = ...
EHLO_STATE = ...
CAPA_STATE = ...
STLS_STATE = ...
UPGRADE_STATE = ...
AUTH_STATE = ...
USERNAME_STATE = ...
PASSWORD_STATE = ...
FROM_STATE = ...
TO_STATE = ...
DATA_STATE = ...
CONTENTS_STATE = ...
QUIT_STATE = ...
FINAL_STATE = ...
class SMTPConnection(netius.Connection):
    AUTH_METHODS = ...
    def __init__(self, host=..., *args, **kwargs) -> None:
        ...
    
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def close(self, *args, **kwargs): # -> None:
        ...
    
    def build(self): # -> None:
        """
        Builds the initial set of states ordered according to
        their internal integer definitions, this method provides
        a fast and scalable way of parsing data.
        """
        ...
    
    def destroy(self): # -> None:
        """
        Destroys the current structure for the stats meaning that
        it's restored to the original values, this method should only
        be called on situation where no more client usage is required.
        """
        ...
    
    def set_smtp(self, froms, tos, contents, username=..., password=...): # -> None:
        ...
    
    def set_sequence(self, sequence, safe=...): # -> None:
        ...
    
    def set_message_seq(self, ehlo=...): # -> None:
        ...
    
    def set_message_stls_seq(self, ehlo=...): # -> None:
        ...
    
    def set_capabilities(self, capabilities, force=...): # -> None:
        ...
    
    def next_sequence(self): # -> None:
        ...
    
    def parse(self, data): # -> int:
        ...
    
    def send_smtp(self, code, message=..., delay=..., callback=...): # -> int:
        ...
    
    def on_line(self, code, message, is_final=...): # -> None:
        ...
    
    def call(self): # -> None:
        ...
    
    def skip(self): # -> None:
        ...
    
    def helo_t(self): # -> None:
        ...
    
    def ehlo_t(self): # -> None:
        ...
    
    def capa_t(self): # -> None:
        ...
    
    def stls_t(self): # -> None:
        ...
    
    def upgrade_t(self): # -> None:
        ...
    
    def auth_t(self): # -> None:
        ...
    
    def username_t(self): # -> None:
        ...
    
    def password_t(self): # -> None:
        ...
    
    def mail_t(self): # -> None:
        ...
    
    def rcpt_t(self): # -> None:
        ...
    
    def data_t(self): # -> None:
        ...
    
    def contents_t(self): # -> None:
        ...
    
    def quit_t(self): # -> None:
        ...
    
    def close_t(self): # -> None:
        ...
    
    def pass_t(self): # -> None:
        ...
    
    def helo(self, host): # -> None:
        ...
    
    def ehlo(self, host): # -> None:
        ...
    
    def starttls(self): # -> None:
        ...
    
    def auth(self, username, password, method=...): # -> None:
        ...
    
    def auth_plain(self, username, password): # -> None:
        ...
    
    def auth_login(self, username, password): # -> None:
        ...
    
    def login_username(self, username): # -> None:
        ...
    
    def login_password(self, password): # -> None:
        ...
    
    def mail(self, value): # -> None:
        ...
    
    def rcpt(self, value): # -> None:
        ...
    
    def data(self): # -> None:
        ...
    
    def quit(self): # -> None:
        ...
    
    def set_expected(self, expected): # -> None:
        ...
    
    def assert_c(self, code): # -> None:
        ...
    
    def assert_s(self, expected): # -> None:
        ...
    
    def best_auth(self): # -> Literal['plain']:
        ...
    


class SMTPClient(netius.StreamClient):
    def __init__(self, host=..., auto_close=..., *args, **kwargs) -> None:
        ...
    
    @classmethod
    def message_s(cls, froms, tos, contents, daemon=..., host=..., mark=..., callback=...): # -> None:
        ...
    
    def message(self, froms, tos, contents, host=..., port=..., username=..., password=..., ehlo=..., stls=..., mark=..., ensure_loop=..., callback=...): # -> None:
        ...
    
    def on_connect(self, connection): # -> None:
        ...
    
    def on_upgrade(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_connection_d(self, connection): # -> None:
        ...
    
    def build_connection(self, socket, address, ssl=...): # -> SMTPConnection:
        ...
    
    def mark(self, contents): # -> str:
        ...
    
    def date(self, message): # -> None:
        ...
    
    def user_agent(self, message): # -> None:
        ...
    


if __name__ == "__main__":
    sender = ...
    receiver = ...
    host = ...
    port = ...
    username = ...
    password = ...
    stls = ...
    mime = ...
    contents = ...
    client = ...
else:
    __path__ = ...

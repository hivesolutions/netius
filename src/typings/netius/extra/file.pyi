import netius as netius
import netius.servers.http2
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
BUFFER_SIZE: int
FOLDER_SVG: str
FILE_SVG: str
EMPTY_GIF: str

class FileServer(netius.servers.http2.HTTP2Server):
    def __init__(self, base_path: str = ..., style_urls: list = ..., index_files: list = ..., path_regex: list = ..., list_dirs: bool = ..., list_engine: str = ..., cors: bool = ..., cache: int = ..., *args, **kwargs) -> None: ...
    @classmethod
    def _sorter_build(cls, name: Incomplete | None = ...): ...
    @classmethod
    def _items_normalize(cls, items, path, pad: bool = ..., space: bool = ..., simplified: bool = ...): ...
    @classmethod
    def _gen_dir(cls, engine, path, path_v, query_m, style: bool = ..., style_urls: list = ..., **kwargs): ...
    @classmethod
    def _gen_dir_base(cls, path, path_v, query_m, style: bool = ..., style_urls: list = ..., **kwargs): ...
    @classmethod
    def _gen_dir_apache(cls, path, path_v, query_m, **kwargs): ...
    @classmethod
    def _gen_dir_legacy(cls, path, path_v, query_m, **kwargs): ...
    def on_connection_d(self, connection): ...
    def on_stream_d(self, stream): ...
    def on_serve(self): ...
    def on_data_http(self, connection, parser): ...
    def on_dir_file(self, connection, parser, path, style: bool = ...): ...
    def on_normal_file(self, connection, parser, path): ...
    def on_no_file(self, connection): ...
    def on_exception_file(self, connection, exception): ...
    def on_not_modified(self, connection, path): ...
    def _next_queue(self, connection): ...
    def _file_send(self, connection): ...
    def _file_finish(self, connection): ...
    def _file_close(self, connection): ...
    def _file_check_close(self, connection): ...
    def _resolve(self, path): ...
    def _build_regex(self): ...
    def _resolve_regex(self, path): ...

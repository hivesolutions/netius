"""
This type stub file was generated by pyright.
"""

import netius.servers

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
BUFFER_SIZE = ...
FOLDER_SVG = ...
FILE_SVG = ...
EMPTY_GIF = ...
class FileServer(netius.servers.HTTP2Server):
    """
    Simple implementation of a file server that is able to list files
    for directories taking into account the base path values.

    This is a synchronous implementation meaning that the server loop
    will block for the various I/O operations to be performed.

    Current implementation supports byte ranges so that partial retrieval
    of a file is possible.
    """
    def __init__(self, base_path=..., style_urls=..., index_files=..., path_regex=..., list_dirs=..., list_engine=..., cors=..., cache=..., *args, **kwargs) -> None:
        ...
    
    def on_connection_d(self, connection): # -> None:
        ...
    
    def on_stream_d(self, stream): # -> None:
        ...
    
    def on_serve(self): # -> None:
        ...
    
    def on_data_http(self, connection, parser): # -> None:
        ...
    
    def on_dir_file(self, connection, parser, path, style=...): # -> None:
        ...
    
    def on_normal_file(self, connection, parser, path): # -> None:
        ...
    
    def on_no_file(self, connection): # -> None:
        ...
    
    def on_exception_file(self, connection, exception): # -> None:
        ...
    
    def on_not_modified(self, connection, path): # -> None:
        ...
    


if __name__ == "__main__":
    server = ...
else:
    __path__ = ...

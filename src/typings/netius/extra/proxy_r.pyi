import netius as netius
import netius.servers.proxy
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
DEFAULT_NAME: str

class ReverseProxyServer(netius.servers.proxy.ProxyServer):
    def __init__(self, config: str = ..., regex: dict = ..., hosts: dict = ..., alias: dict = ..., auth: dict = ..., auth_regex: dict = ..., redirect: dict = ..., redirect_regex: dict = ..., error_urls: dict = ..., forward: Incomplete | None = ..., strategy: str = ..., reuse: bool = ..., sts: int = ..., resolve: bool = ..., resolve_t: float = ..., host_f: bool = ..., echo: bool = ..., *args, **kwargs) -> None: ...
    def info_dict(self, full: bool = ...): ...
    def proxy_r_dict(self): ...
    def on_diag(self): ...
    def on_start(self): ...
    def on_serve(self): ...
    def on_headers(self, connection, parser): ...
    def rules(self, url, parser): ...
    def rules_regex(self, url, parser): ...
    def rules_host(self, url, parser): ...
    def rules_forward(self, url, parser): ...
    def balancer(self, values): ...
    def balancer_robin(self, values): ...
    def balancer_smart(self, values): ...
    def acquirer(self, state): ...
    def acquirer_robin(self, state): ...
    def acquirer_smart(self, state): ...
    def releaser(self, state): ...
    def releaser_robin(self, state): ...
    def releaser_smart(self, state): ...
    def dns_start(self, timeout: float = ...): ...
    def dns_tick(self, timeout: float = ...): ...
    def dns_callback(self, host, hostname, parsed, index: int = ..., resolved: list = ...): ...
    def _on_prx_message(self, client, parser, message): ...
    def _on_prx_close(self, client, _connection): ...
    def _apply_all(self, parser, connection, headers, upper: bool = ..., normalize: bool = ..., replace: bool = ...): ...
    def _apply_headers(self, parser, connection, parser_prx, headers, upper: bool = ...): ...
    def _set_strategy(self): ...
    def _resolve_regex(self, value, regexes, default: Incomplete | None = ...): ...
    def _echo(self, sort: bool = ...): ...
    def _echo_regex(self, sort: bool = ...): ...
    def _echo_hosts(self, sort: bool = ...): ...
    def _echo_alias(self, sort: bool = ...): ...
    def _echo_redirect(self, sort: bool = ...): ...
    def _echo_error_urls(self, sort: bool = ...): ...

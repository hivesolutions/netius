import netius as netius
import netius.adapters.base
import netius.adapters.base as base
from typing import Any

class MemoryAdapter(netius.adapters.base.BaseAdapter):
    def __init__(self) -> None: ...
    def set(self, value, owner: str = ...) -> str: ...
    def get_file(self, key: str, mode: str = ...) -> netius.legacy.StringIO: ...
    def delete(self, key: str, owner: str = ...) -> None: ...
    def append(self, key: str, value: Any) -> None: ...
    def truncate(self, key: str, count: int) -> None: ...
    def size(self, key: str) -> int: ...
    def count(self, owner: str | None = ...) -> int: ...
    def list(self, owner: str | None = ...) -> tuple[()]: ...
    def _ensure(self, owner: str) -> dict: ...
    def _build_close(self, file: netius.legacy.StringIO, key: str) -> function: ...

"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class NetiusError(Exception):
    """
    The top level base error to be used in the
    netius infra-structure.

    Note that this class inherits from the runtime
    error meaning that all the errors are runtime.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get_kwarg(self, name, default=...):
        ...
    
    @property
    def uid(self): # -> UUID:
        ...
    


class RuntimeError(NetiusError):
    """
    Error to be used for situations where an exception
    is raised during a typical runtime situation.

    This error class is meant to be used as the parent
    class in every exception raised during normal execution.
    """
    ...


class StopError(RuntimeError):
    """
    Error to be used for situations where a stop
    intention is meant to be raised to upper layers.

    This error represent an operation and not a real
    error and should be used as such.
    """
    ...


class PauseError(RuntimeError):
    """
    Error to be used for situations where a pause
    intention is meant to be raised to upper layers.

    This error represent an operation and not a real
    error and should be used as such.
    """
    ...


class WakeupError(RuntimeError):
    """
    Error used to send a wakeup intent from one context
    or thread to another.

    This is especially useful on the context of signal
    handling where an interruption may happen at any time.
    """
    ...


class DataError(RuntimeError):
    """
    Error to be used for situations where the
    data that has been received/sent is invalid.

    This error may be used for situations where
    the data in the buffer is not sufficient for
    parsing the values.
    """
    ...


class ParserError(RuntimeError):
    """
    Error caused by a malformed data that invalidated
    the possibility to parse it.

    This error should only be used under a parser infra-
    structure and never outside it.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GeneratorError(RuntimeError):
    """
    Error generated by a problem in the generation of
    and encoded data (reverse of parser error).

    This error should be raise only in a generator of
    an encoded stream buffer.
    """
    ...


class SecurityError(RuntimeError):
    """
    Error caused by a failed security verification this
    errors should be properly audited in order to avoid
    extra problems that may arise from them.

    This kind of problems is considered to be runtime
    as they should not be related with programming.
    """
    ...


class NotImplemented(RuntimeError):
    """
    Error caused by the non implementation of a certain
    method/feature at a certain level. This may mean that
    the wrong level of abstraction is being called or a
    certain feature is pending development.

    This kind of problems is considered to be development
    as they may be related with programming.
    """
    ...


class AssertionError(RuntimeError):
    """
    Error raised for failure to meet any pre-condition or
    assertion for a certain data set.
    """
    ...



"""
This type stub file was generated by pyright.
"""

from .conn import *
from .common import *

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
BUFFER_SIZE = ...
GC_TIMEOUT = ...
class Client(Base):
    """
    Abstract client implementation, should provide the required
    mechanisms for basic socket client handling and thread starting
    and managing techniques. Proper and concrete implementation for
    the various socket types should inherit from this class.
    """
    _client = ...
    def __init__(self, thread=..., daemon=..., *args, **kwargs) -> None:
        ...
    
    @classmethod
    def get_client_s(cls, *args, **kwargs): # -> Self:
        ...
    
    @classmethod
    def cleanup_s(cls): # -> None:
        ...
    
    def ensure_loop(self, env=...): # -> None:
        """
        Ensures that the proper main loop thread requested in the building
        of the entity is started if that was requested.

        This mechanism is required because the thread construction and
        starting should be deferred until an operation in the connection
        is requested (lazy thread construction).

        The call to this method should be properly inserted on the code so
        that it is only called when a main (polling) loop is required.

        :type env: bool
        :param env: If the environment variables should be used for the
        setting of some of the parameters of the new client/poll to be used.
        """
        ...
    
    def join(self, timeout=...): # -> None:
        ...
    


class DatagramClient(Client):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def boot(self): # -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def on_read(self, _socket): # -> None:
        ...
    
    def on_write(self, _socket): # -> None:
        ...
    
    def on_error(self, _socket): # -> None:
        ...
    
    def on_exception(self, exception): # -> None:
        ...
    
    def on_expected(self, exception): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def keep_gc(self, timeout=..., run=...): # -> None:
        ...
    
    def gc(self, callbacks=...): # -> None:
        ...
    
    def add_request(self, request): # -> None:
        ...
    
    def remove_request(self, request): # -> None:
        ...
    
    def get_request(self, id):
        ...
    
    def ensure_socket(self): # -> None:
        ...
    
    def ensure_write(self): # -> tuple[Any | Literal[-1, 0], int, Any, int, list[bool]] | Orderable | None:
        ...
    
    def remove_write(self): # -> None:
        ...
    
    def enable_read(self): # -> None:
        ...
    
    def disable_read(self): # -> None:
        ...
    
    def send(self, data, address, delay=..., ensure_loop=..., callback=...): # -> None:
        ...
    


class StreamClient(Client):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def ticks(self): # -> None:
        ...
    
    def info_dict(self, full=...): # -> dict[str, str | Any]:
        ...
    
    def acquire_c(self, host, port, ssl=..., key_file=..., cer_file=..., validate=..., callback=...):
        ...
    
    def release_c(self, connection): # -> None:
        ...
    
    def remove_c(self, connection): # -> None:
        ...
    
    def validate_c(self, connection, close=...):
        ...
    
    def connect(self, host, port, ssl=..., key_file=..., cer_file=..., ca_file=..., ca_root=..., ssl_verify=..., family=..., type=..., ensure_loop=..., env=...):
        ...
    
    def acquire(self, connection): # -> None:
        ...
    
    def on_read(self, _socket):
        ...
    
    def on_write(self, _socket): # -> None:
        ...
    
    def on_error(self, _socket): # -> None:
        ...
    
    def on_exception(self, exception, connection): # -> None:
        ...
    
    def on_expected(self, exception, connection): # -> None:
        ...
    
    def on_connect(self, connection): # -> None:
        ...
    
    def on_upgrade(self, connection): # -> None:
        ...
    
    def on_ssl(self, connection): # -> None:
        ...
    
    def on_acquire(self, connection): # -> None:
        ...
    
    def on_release(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    



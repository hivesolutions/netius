import asyncio.events
import netius.base.asynchronous as asynchronous
import netius.base.config as config
import netius.base.errors as errors
import netius.base.legacy as legacy
import netius.base.transport as transport
import socket
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str

class CompatLoop(asyncio.events.AbstractEventLoop):
    def __init__(self, loop) -> None: ...
    def __getattr__(self, name): ...
    def time(self): ...
    def call_soon(self, callback, *args): ...
    def call_soon_threadsafe(self, callback, *args): ...
    def call_at(self, when, callback, *args): ...
    def call_later(self, delay, callback, *args): ...
    def create_future(self): ...
    def create_task(self, coroutine): ...
    def create_server(self, *args, **kwargs): ...
    def create_connection(self, *args, **kwargs): ...
    def create_datagram_endpoint(self, *args, **kwargs): ...
    def getaddrinfo(self, *args, **kwargs): ...
    def getnameinfo(self, *args, **kwargs): ...
    def run_until_complete(self, future): ...
    def run_forever(self): ...
    def run_in_executor(self, *args, **kwargs): ...
    def stop(self): ...
    def close(self): ...
    def get_exception_handler(self): ...
    def set_exception_handler(self, handler): ...
    def default_exception_handler(self, context): ...
    def call_exception_handler(self, context): ...
    def get_debug(self): ...
    def set_debug(self, enabled): ...
    def set_default_executor(self, executor): ...
    def get_task_factory(self): ...
    def set_task_factory(self, factory): ...
    def is_running(self): ...
    def is_closed(self): ...
    def _getaddrinfo(self, host, port, family: int = ..., type: int = ..., proto: int = ..., flags: int = ...): ...
    def _getnameinfo(self, sockaddr, flags: int = ...): ...
    def _run_in_executor(self, executor, func, *args): ...
    def _create_connection(self, protocol_factory, host: Incomplete | None = ..., port: Incomplete | None = ..., ssl: Incomplete | None = ..., family: int = ..., proto: int = ..., flags: int = ..., sock: Incomplete | None = ..., local_addr: Incomplete | None = ..., server_hostname: Incomplete | None = ..., *args, **kwargs): ...
    def _create_datagram_endpoint(self, protocol_factory, local_addr: Incomplete | None = ..., remote_addr: Incomplete | None = ..., family: int = ..., proto: int = ..., flags: int = ..., reuse_address: Incomplete | None = ..., reuse_port: Incomplete | None = ..., allow_broadcast: Incomplete | None = ..., sock: Incomplete | None = ..., *args, **kwargs): ...
    def _set_current_task(self, task): ...
    def _unset_current_task(self): ...
    def _call_delay(self, callback, args, timeout: Incomplete | None = ..., immediately: bool = ..., verify: bool = ..., safe: bool = ...): ...
    def _sleep(self, timeout, future: Incomplete | None = ...): ...
    def _default_handler(self, context): ...
    @property
    def _thread_id(self): ...
def is_compat(): ...
def is_asyncio(): ...
def build_datagram(*args, **kwargs): ...
def connect_stream(*args, **kwargs): ...
def _build_datagram_native(protocol_factory, family: socket.AddressFamily = ..., type: socket.SocketKind = ..., remote_host: Incomplete | None = ..., remote_port: Incomplete | None = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ..., *args, **kwargs): ...
def _build_datagram_compat(protocol_factory, family: socket.AddressFamily = ..., type: socket.SocketKind = ..., remote_host: Incomplete | None = ..., remote_port: Incomplete | None = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ..., *args, **kwargs): ...
def _connect_stream_native(protocol_factory, host, port, ssl: bool = ..., key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., ssl_verify: bool = ..., family: socket.AddressFamily = ..., type: socket.SocketKind = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ..., *args, **kwargs): ...
def _connect_stream_compat(protocol_factory, host, port, ssl: bool = ..., key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., ssl_verify: bool = ..., family: socket.AddressFamily = ..., type: socket.SocketKind = ..., callback: Incomplete | None = ..., loop: Incomplete | None = ..., *args, **kwargs): ...

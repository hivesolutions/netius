import netius.base.legacy as legacy
import netius.base.observer
import netius.base.observer as observer
from typing import ClassVar, Any, Self


class Agent(netius.base.observer.Observable):
    @classmethod
    def cleanup_s(cls) -> None: ...
    def cleanup(self, destroy: bool = ...) -> None: ...
    def destroy(self) -> None: ...

class ClientAgent(Agent):
    _clients: ClassVar[dict] = ...
    @classmethod
    def cleanup_s(cls) -> None: ...
    @classmethod
    def get_client_s(cls, *args, **kwargs)-> Self@ClientAgent: ...

class ServerAgent(Agent): ...

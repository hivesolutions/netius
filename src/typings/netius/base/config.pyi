import netius.base.legacy as legacy
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
FILE_NAME: str
FILE_TEMPLATE: str
HOME_FILE: str
IMPORT_NAMES: tuple
CASTS: dict
ENV_ENCODINGS: tuple
CONFIGS: dict
CONFIG_F: list
HOMES: list
def conf(name, default: Incomplete | None = ..., cast: Incomplete | None = ..., ctx: Incomplete | None = ...): ...
def conf_prefix(prefix, ctx: Incomplete | None = ...): ...
def conf_suffix(suffix, ctx: Incomplete | None = ...): ...
def conf_s(name, value, ctx: Incomplete | None = ...): ...
def conf_r(name, ctx: Incomplete | None = ...): ...
def conf_d(ctx: Incomplete | None = ...): ...
def conf_ctx(): ...
def load(names: tuple = ..., path: Incomplete | None = ..., encoding: str = ..., ctx: Incomplete | None = ...): ...
def load_file(name: str = ..., path: Incomplete | None = ..., encoding: str = ..., ctx: Incomplete | None = ...): ...
def load_env(ctx: Incomplete | None = ...): ...
def get_homes(file_path: str = ..., default: str = ..., encoding: str = ..., force_default: bool = ...): ...
def _cast_r(cast): ...
def _load_includes(base_path, config, encoding: str = ...): ...
def _is_valid(key): ...
def _is_devel(): ...
def _is_secure(): ...

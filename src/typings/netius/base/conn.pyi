import netius.base.config as config
import netius.base.legacy as legacy
import netius.base.observer
import netius.base.observer as observer
import netius.base.tls as tls
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str
OPEN: int
CLOSED: int
PENDING: int
CHUNK_SIZE: int

class BaseConnection(netius.base.observer.Observable):
    def __init__(self, owner: Incomplete | None = ..., socket: Incomplete | None = ..., address: Incomplete | None = ..., datagram: bool = ..., ssl: bool = ..., max_pending: int = ..., min_pending: int = ...) -> None: ...
    def destroy(self): ...
    def open(self, connect: bool = ...): ...
    def close(self, flush: bool = ..., destroy: bool = ...): ...
    def close_flush(self): ...
    def upgrade(self, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., server: bool = ...): ...
    def set_connecting(self): ...
    def set_connected(self): ...
    def set_upgraded(self): ...
    def set_data(self, data, address: Incomplete | None = ...): ...
    def ensure_write(self, flush: bool = ...): ...
    def remove_write(self): ...
    def enable_read(self): ...
    def disable_read(self): ...
    def send(self, data, address: Incomplete | None = ..., delay: bool = ..., force: bool = ..., callback: Incomplete | None = ...): ...
    def recv(self, size: int = ..., force: bool = ...): ...
    def pend(self, data, back: bool = ...): ...
    def restore(self, data, back: bool = ...): ...
    def run_starter(self): ...
    def end_starter(self): ...
    def add_starter(self, starter, back: bool = ...): ...
    def remove_starter(self, starter): ...
    def info_dict(self, full: bool = ...): ...
    def ssl_certificate(self, binary: bool = ...): ...
    def ssl_verify_host(self, host: Incomplete | None = ...): ...
    def ssl_verify_fingerprint(self, fingerprint: Incomplete | None = ...): ...
    def ssl_dump_certificate(self, dump: bool = ...): ...
    def ssl_protocol(self): ...
    def ssl_alpn_protocol(self): ...
    def ssl_npn_protocol(self): ...
    def is_open(self): ...
    def is_closed(self): ...
    def is_pending(self): ...
    def is_connected(self): ...
    def is_connecting(self): ...
    def is_upgrading(self): ...
    def is_throttleable(self): ...
    def is_exhausted(self): ...
    def is_restored(self): ...
    def is_pending_data(self): ...
    def _send(self): ...
    def _recv(self, size): ...
    def _recv_ssl(self, size): ...
    def _recv_restored(self, size): ...
    def _shutdown(self, close: bool = ..., force: bool = ..., ignore: bool = ...): ...
    def _close_callback(self, connection): ...
    def _flush_write(self): ...

class DiagConnection(BaseConnection):
    def __init__(self, *args, **kwargs) -> None: ...
    def recv(self, *args, **kwargs): ...
    def send(self, data, *args, **kwargs): ...
    def info_dict(self, full: bool = ...): ...
    def _uptime(self): ...
    def _resolve(self, address): ...
is_diag: bool

class Connection(netius.base.observer.Observable):
    def __init__(self, owner: Incomplete | None = ..., socket: Incomplete | None = ..., address: Incomplete | None = ..., datagram: bool = ..., ssl: bool = ..., max_pending: int = ..., min_pending: int = ...) -> None: ...
    def destroy(self): ...
    def open(self, connect: bool = ...): ...
    def close(self, flush: bool = ..., destroy: bool = ...): ...
    def close_flush(self): ...
    def upgrade(self, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., server: bool = ...): ...
    def set_connecting(self): ...
    def set_connected(self): ...
    def set_upgraded(self): ...
    def set_data(self, data, address: Incomplete | None = ...): ...
    def ensure_write(self, flush: bool = ...): ...
    def remove_write(self): ...
    def enable_read(self): ...
    def disable_read(self): ...
    def send(self, data, address: Incomplete | None = ..., delay: bool = ..., force: bool = ..., callback: Incomplete | None = ...): ...
    def recv(self, size: int = ..., force: bool = ...): ...
    def pend(self, data, back: bool = ...): ...
    def restore(self, data, back: bool = ...): ...
    def run_starter(self): ...
    def end_starter(self): ...
    def add_starter(self, starter, back: bool = ...): ...
    def remove_starter(self, starter): ...
    def info_dict(self, full: bool = ...): ...
    def ssl_certificate(self, binary: bool = ...): ...
    def ssl_verify_host(self, host: Incomplete | None = ...): ...
    def ssl_verify_fingerprint(self, fingerprint: Incomplete | None = ...): ...
    def ssl_dump_certificate(self, dump: bool = ...): ...
    def ssl_protocol(self): ...
    def ssl_alpn_protocol(self): ...
    def ssl_npn_protocol(self): ...
    def is_open(self): ...
    def is_closed(self): ...
    def is_pending(self): ...
    def is_connected(self): ...
    def is_connecting(self): ...
    def is_upgrading(self): ...
    def is_throttleable(self): ...
    def is_exhausted(self): ...
    def is_restored(self): ...
    def is_pending_data(self): ...
    def _send(self): ...
    def _recv(self, size): ...
    def _recv_ssl(self, size): ...
    def _recv_restored(self, size): ...
    def _shutdown(self, close: bool = ..., force: bool = ..., ignore: bool = ...): ...
    def _close_callback(self, connection): ...
    def _flush_write(self): ...

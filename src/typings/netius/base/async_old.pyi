"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
class Future:
    """
    Base future object that represents a promise that a certain
    operation is going to be accomplished.

    Should be used as a placeholder for the callbacks for error
    and success and the for the final result of the execution.

    Most of the implementation takes inspiration on the reference
    Python implementation on futures.

    :see: https://en.wikipedia.org/wiki/Futures_and_promises
    """
    def __init__(self, loop=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Self, Any, None]:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def running(self): # -> bool:
        ...
    
    def done(self): # -> bool:
        ...
    
    def cancelled(self): # -> bool:
        ...
    
    def finished(self): # -> bool:
        ...
    
    def result(self): # -> None:
        ...
    
    def exception(self, timeout=...): # -> None:
        ...
    
    def partial(self, value): # -> None:
        ...
    
    def add_done_callback(self, function): # -> None:
        ...
    
    def add_partial_callback(self, function): # -> None:
        ...
    
    def add_ready_callback(self, function): # -> None:
        ...
    
    def add_closed_callback(self, function): # -> None:
        ...
    
    def approve(self, cleanup=...): # -> None:
        ...
    
    def cancel(self, cleanup=..., force=...): # -> bool:
        ...
    
    def set_result(self, result, cleanup=..., force=...): # -> None:
        ...
    
    def set_exception(self, exception, cleanup=..., force=...): # -> None:
        ...
    
    @property
    def ready(self): # -> Literal[True]:
        ...
    
    @property
    def closed(self): # -> Literal[False]:
        ...
    


class Task(Future):
    def __init__(self, future=...) -> None:
        ...
    


class Handle:
    def __init__(self, callable_t=...) -> None:
        ...
    
    def cancel(self): # -> None:
        ...
    


class Executor:
    def submit(self, callable, *args, **kwargs):
        ...
    


class ThreadPoolExecutor(Executor):
    def __init__(self, owner) -> None:
        ...
    
    def submit(self, callable, *args, **kwargs):
        ...
    


def coroutine(function): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Generator[Any, Any, None]]:
    ...

def async_test_all(factory=..., close=...): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    ...

def async_test(function): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    ...

def ensure_generator(value): # -> tuple[Literal[True], Any] | tuple[Literal[False], Any]:
    ...

def get_asyncio(): # -> None:
    ...

def is_coroutine(callable): # -> bool:
    ...

def is_coroutine_object(generator): # -> bool:
    ...

def is_coroutine_native(generator): # -> Literal[False]:
    ...

def is_future(future): # -> bool:
    ...

def is_neo(): # -> bool:
    ...

def is_asynclib(): # -> bool:
    ...

def is_await(): # -> bool:
    ...

def wakeup(force=...):
    ...

def sleep(timeout, compat=..., future=...): # -> Generator[Any, Any, None]:
    ...

def wait(event, timeout=..., future=...): # -> Generator[Any, Any, None]:
    ...

def notify(event, data=...):
    ...

def coroutine_return(coroutine): # -> Generator[Any, Any, None]:
    """
    Allows for the abstraction of the return value of a coroutine
    object to be the result of the future yield as the first element
    of the generator.

    This allows the possibility to provide compatibility with the legacy
    not return allowed generators.

    :type coroutine: CoroutineObject
    :param coroutine: The coroutine object that is going to be yield back
    and have its last future result returned from the generator.
    """
    ...


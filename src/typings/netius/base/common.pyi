import netius as netius
import netius.base.async_old as async_old
import netius.base.asynchronous as asynchronous
import netius.base.compat as compat
import netius.base.config as config
import netius.base.errors as errors
import netius.base.legacy as legacy
import netius.base.log as log
import netius.base.observer
import netius.base.observer as observer
import netius.base.tls as tls
import netius.base.util as util
import netius.middleware as middleware
import socket
import ssl
import threading
from _typeshed import Incomplete
from netius.base.async_neo import AwaitWrapper as AwaitWrapper, CoroutineWrapper as CoroutineWrapper, Future as Future, coroutine as coroutine, coroutine_return as coroutine_return, ensure_generator as ensure_generator, get_asyncio as get_asyncio, is_coroutine as is_coroutine, is_coroutine_native as is_coroutine_native, is_coroutine_object as is_coroutine_object, is_future as is_future, sleep as sleep, wait as wait
from netius.base.async_old import Executor as Executor, Handle as Handle, Task as Task, ThreadPoolExecutor as ThreadPoolExecutor, async_test as async_test, async_test_all as async_test_all, is_asynclib as is_asynclib, is_await as is_await, is_neo as is_neo, notify as notify, wakeup as wakeup
from netius.base.conn import BaseConnection as BaseConnection, Connection as Connection, DiagConnection as DiagConnection
from netius.base.poll import EpollPoll as EpollPoll, KqueuePoll as KqueuePoll, Poll as Poll, PollPoll as PollPoll, SelectPoll as SelectPoll
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
OPEN: int
CLOSED: int
PENDING: int
CHUNK_SIZE: int
is_diag: bool
POLL_TIMEOUT: float
NAME: str
VERSION: str
PLATFORM: str
IDENTIFIER_TINY: str
IDENTIFIER_SHORT: str
IDENTIFIER_LONG: str
IDENTIFIER: str
WSAEWOULDBLOCK: int
WSAECONNABORTED: int
WSAECONNRESET: int
SSL_ERROR_CERT_ALREADY_IN_HASH_TABLE: int
POLL_ORDER: tuple
SILENT_ERRORS: tuple
VALID_ERRORS: tuple
SSL_SILENT_ERRORS: tuple
SSL_VALID_ERRORS: tuple
SSL_ERROR_NAMES: dict
SSL_VALID_REASONS: tuple
TCP_TYPE: int
UDP_TYPE: int
STATE_STOP: int
STATE_START: int
STATE_PAUSE: int
STATE_CONFIG: int
STATE_POLL: int
STATE_TICK: int
STATE_READ: int
STATE_WRITE: int
STATE_ERRROR: int
STATE_STRINGS: tuple
KEEPALIVE_TIMEOUT: int
KEEPALIVE_INTERVAL: int
KEEPALIVE_COUNT: int
ALLOW_BLOCK: bool
LOG_FORMAT: str
BASE_PATH: str
EXTRAS_PATH: str
SSL_KEY_PATH: str
SSL_CER_PATH: str
SSL_CA_PATH: None
SSL_DH_PATH: str

class AbstractBase(netius.base.observer.Observable):
    _MAIN: ClassVar[None] = ...
    _MAIN_C: ClassVar[None] = ...
    def __init__(self, name: Incomplete | None = ..., handlers: Incomplete | None = ..., *args, **kwargs) -> None: ...
    @classmethod
    def test_poll(cls, preferred: Incomplete | None = ...): ...
    @classmethod
    def get_loop(cls, compat: bool = ..., asyncio: bool = ...): ...
    @classmethod
    def get_main(cls, compat: bool = ...): ...
    @classmethod
    def get_asyncio(cls): ...
    @classmethod
    def set_main(cls, instance, set_compat: bool = ...): ...
    @classmethod
    def unset_main(cls, set_compat: bool = ...): ...
    @classmethod
    def patch_asyncio(cls): ...
    @classmethod
    def waitpid(cls, pid): ...
    def destroy(self): ...
    def call_safe(self, callable, args: list = ..., kwargs: dict = ...): ...
    def wait_event(self, callable, name: Incomplete | None = ...): ...
    def unwait_event(self, callable, name: Incomplete | None = ...): ...
    def delay(self, callable, timeout: Incomplete | None = ..., immediately: bool = ..., verify: bool = ..., safe: bool = ...): ...
    def delay_s(self, callable, timeout: Incomplete | None = ..., immediately: bool = ..., verify: bool = ..., wakeup: bool = ...): ...
    def delay_m(self): ...
    def ensure(self, coroutine, args: list = ..., kwargs: dict = ..., thread: Incomplete | None = ..., future: Incomplete | None = ..., immediately: bool = ...): ...
    def resolve_hostname(self, hostname, type: str = ...): ...
    def run_forever(self): ...
    def run_coroutine(self, coroutine, args: list = ..., kwargs: dict = ..., thread: Incomplete | None = ..., close: Incomplete | None = ...): ...
    def wakeup(self, force: bool = ...): ...
    def sleep(self, timeout, future: Incomplete | None = ...): ...
    def wait(self, event, timeout: Incomplete | None = ..., future: Incomplete | None = ...): ...
    def notify(self, event, data: Incomplete | None = ...): ...
    def load(self, full: bool = ...): ...
    def unload(self, full: bool = ...): ...
    def boot(self): ...
    def welcome(self): ...
    def load_logging(self, level: int = ..., format: str = ..., unique: bool = ...): ...
    def unload_logging(self, safe: bool = ...): ...
    def extra_logging(self, level, formatter): ...
    def level_logging(self, level): ...
    def load_diag(self, env: bool = ...): ...
    def load_middleware(self, suffix: str = ...): ...
    def unload_middleware(self): ...
    def register_middleware(self, middleware_c, *args, **kwargs): ...
    def call_middleware(self, name, *args, **kwargs): ...
    def bind_signals(self, signals: tuple = ..., handler: Incomplete | None = ...): ...
    def unbind_signals(self, signals: tuple = ...): ...
    def bind_env(self): ...
    def forever(self, env: bool = ...): ...
    def start(self): ...
    def stop(self): ...
    def pause(self): ...
    def resume(self): ...
    def close(self): ...
    def finish(self): ...
    def main(self): ...
    def is_main(self): ...
    def is_running(self): ...
    def is_started(self): ...
    def is_stopped(self): ...
    def is_paused(self): ...
    def is_edge(self): ...
    def is_empty(self): ...
    def is_sub_read(self, socket): ...
    def is_sub_write(self, socket): ...
    def is_sub_error(self, socket): ...
    def sub_all(self, socket): ...
    def unsub_all(self, socket): ...
    def sub_read(self, socket): ...
    def sub_write(self, socket): ...
    def sub_error(self, socket): ...
    def unsub_read(self, socket): ...
    def unsub_write(self, socket): ...
    def unsub_error(self, socket): ...
    def cleanup(self, destroy: bool = ...): ...
    def loop(self): ...
    def block(self): ...
    def fork(self, timeout: int = ...): ...
    def finalize(self): ...
    def ticks(self): ...
    def reads(self, reads, state: bool = ...): ...
    def writes(self, writes, state: bool = ...): ...
    def errors(self, errors, state: bool = ...): ...
    def datagram(self, family: socket.AddressFamily = ..., type: socket.SocketKind = ..., local_host: Incomplete | None = ..., local_port: Incomplete | None = ..., remote_host: Incomplete | None = ..., remote_port: Incomplete | None = ..., callback: Incomplete | None = ...): ...
    def connect(self, host, port, receive_buffer: Incomplete | None = ..., send_buffer: Incomplete | None = ..., ssl: bool = ..., key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., ssl_verify: bool = ..., family: socket.AddressFamily = ..., type: socket.SocketKind = ..., callback: Incomplete | None = ..., env: bool = ...): ...
    def acquire(self, connection): ...
    def pregister(self, pool): ...
    def punregister(self, pool): ...
    def pcallback(self, event, socket, pool): ...
    def nensure(self): ...
    def nstart(self): ...
    def nstop(self): ...
    def tensure(self): ...
    def tstart(self): ...
    def tstop(self): ...
    def texecute(self, callable, args: list = ..., kwargs: dict = ..., callback: Incomplete | None = ...): ...
    def files(self): ...
    def fopen(self, *args, **kwargs): ...
    def fclose(self, *args, **kwargs): ...
    def fread(self, *args, **kwargs): ...
    def fwrite(self, *args, **kwargs): ...
    def fensure(self): ...
    def fstart(self): ...
    def fstop(self): ...
    def on_connection_c(self, connection): ...
    def on_connection_d(self, connection): ...
    def on_stream_c(self, stream): ...
    def on_stream_d(self, stream): ...
    def on_fork(self): ...
    def on_join(self): ...
    def on_child(self, pipe: Incomplete | None = ...): ...
    def on_command(self, command): ...
    def on_diag(self): ...
    def on_start(self): ...
    def on_stop(self): ...
    def on_pause(self): ...
    def on_resume(self): ...
    def on_read(self, _socket): ...
    def on_write(self, _socket): ...
    def on_error(self, _socket): ...
    def on_exception(self, exception, connection): ...
    def on_expected(self, exception, connection): ...
    def on_connect(self, connection): ...
    def on_upgrade(self, connection): ...
    def on_client_ssl(self, connection): ...
    def on_acquire(self, connection): ...
    def on_acquire_base(self, connection): ...
    def on_release(self, connection): ...
    def on_release_base(self, connection): ...
    def on_data(self, connection, data): ...
    def on_data_base(self, connection, data): ...
    def info_dict(self, full: bool = ...): ...
    def info_string(self, full: bool = ..., safe: bool = ...): ...
    def connections_dict(self, full: bool = ...): ...
    def connection_dict(self, id, full: bool = ...): ...
    def build_connection(self, socket, address: Incomplete | None = ..., datagram: bool = ..., ssl: bool = ...): ...
    def base_connection(self, *args, **kwargs): ...
    def new_connection(self, connection): ...
    def del_connection(self, connection): ...
    def add_callback(self, socket, callback): ...
    def remove_callback(self, socket, callback): ...
    def load_config(self, path: str = ..., **kwargs): ...
    def apply_config(self, path, kwargs): ...
    def exec_safe(self, connection, callable, *args, **kwargs): ...
    def is_devel(self): ...
    def is_debug(self): ...
    def is_info(self): ...
    def is_warning(self): ...
    def is_error(self): ...
    def is_critical(self): ...
    def debug(self, object): ...
    def info(self, object): ...
    def warning(self, object): ...
    def error(self, object): ...
    def critical(self, object): ...
    def log_stack(self, method: Incomplete | None = ..., info: bool = ...): ...
    def log_info(self, method: Incomplete | None = ...): ...
    def log(self, *args, **kwargs): ...
    def log_python_3(self, object, level: int = ...): ...
    def log_python_2(self, object, level: int = ...): ...
    def build_poll(self): ...
    def build_future(self, compat: bool = ..., asyncio: bool = ...): ...
    def get_id(self, unique: bool = ...): ...
    def get_poll(self): ...
    def get_poll_name(self): ...
    def get_state(self): ...
    def set_state(self, state): ...
    def get_state_s(self, lower: bool = ...): ...
    def get_env(self, name, default: Incomplete | None = ..., cast: Incomplete | None = ..., expand: bool = ...): ...
    def expand(self, value, encoding: str = ..., force: bool = ...): ...
    def get_protocols(self): ...
    def get_adapter(self, name: str = ..., *args, **kwargs): ...
    def get_auth(self, name: str = ..., *args, **kwargs): ...
    def get_connection(self, socket): ...
    def _pending(self, connection): ...
    def _notifies(self): ...
    def _delays(self): ...
    def _generate(self, hashed: bool = ...): ...
    def _connect(self, connection): ...
    def _connectf(self, connection): ...
    def _socket_keepalive(self, _socket, timeout: Incomplete | None = ..., interval: Incomplete | None = ..., count: Incomplete | None = ...): ...
    def _ssl_init(self, strict: bool = ..., env: bool = ...): ...
    def _ssl_destroy(self): ...
    def _ssl_callback(self, socket, hostname, context): ...
    def _ssl_ctx(self, values, context: Incomplete | None = ..., secure: int = ..., context_options: list = ...): ...
    def _ssl_ctx_base(self, context, secure: int = ..., context_options: list = ...): ...
    def _ssl_ctx_protocols(self, context): ...
    def _ssl_ctx_alpn(self, context): ...
    def _ssl_ctx_npn(self, context): ...
    def _ssl_certs(self, context, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., verify_mode: ssl.VerifyMode = ..., check_hostname: bool = ...): ...
    def _ssl_upgrade(self, _socket, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., server: bool = ..., ssl_verify: bool = ..., server_hostname: Incomplete | None = ...): ...
    def _ssl_wrap(self, _socket, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., server: bool = ..., ssl_verify: bool = ..., server_hostname: Incomplete | None = ...): ...
    def _ssl_handshake(self, connection): ...
    def _ssl_client_handshake(self, connection): ...
    def _expand_destroy(self): ...
    def _level(self, level): ...
    def _format_delta(self, time_delta, count: int = ...): ...
    def _wait_forever(self, sleep: int = ...): ...
    @property
    def is_parent(self): ...
    @property
    def is_child(self): ...
    @property
    def is_forked(self): ...

class DiagBase(AbstractBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def reads(self, *args, **kwargs): ...
    def writes(self, *args, **kwargs): ...
    def errors(self, *args, **kwargs): ...
    def info_dict(self, full: bool = ...): ...

class BaseThread(threading.Thread):
    def __init__(self, owner: Incomplete | None = ..., daemon: bool = ..., *args, **kwargs) -> None: ...
    def run(self): ...
def new_loop_main(factory: Incomplete | None = ..., _compat: Incomplete | None = ..., **kwargs): ...
def new_loop_asyncio(**kwargs): ...
def new_loop(factory: Incomplete | None = ..., _compat: Incomplete | None = ..., asyncio: Incomplete | None = ..., **kwargs): ...
def ensure_main(factory: Incomplete | None = ..., **kwargs): ...
def ensure_asyncio(**kwargs): ...
def ensure_loop(factory: Incomplete | None = ..., asyncio: Incomplete | None = ..., **kwargs): ...
def get_main(factory: Incomplete | None = ..., ensure: bool = ..., **kwargs): ...
def get_loop(factory: Incomplete | None = ..., ensure: bool = ..., _compat: Incomplete | None = ..., asyncio: Incomplete | None = ..., **kwargs): ...
def get_event_loop(*args, **kwargs): ...
def stop_loop(compat: bool = ..., asyncio: bool = ...): ...
def compat_loop(loop): ...
def get_poll(): ...
def build_future(compat: bool = ..., asyncio: bool = ...): ...
def ensure(coroutine, args: list = ..., kwargs: dict = ..., thread: Incomplete | None = ...): ...
def ensure_pool(coroutine, args: list = ..., kwargs: dict = ...): ...

class Base(netius.base.observer.Observable):
    _MAIN: ClassVar[None] = ...
    _MAIN_C: ClassVar[None] = ...
    def __init__(self, name: Incomplete | None = ..., handlers: Incomplete | None = ..., *args, **kwargs) -> None: ...
    @classmethod
    def test_poll(cls, preferred: Incomplete | None = ...): ...
    @classmethod
    def get_loop(cls, compat: bool = ..., asyncio: bool = ...): ...
    @classmethod
    def get_main(cls, compat: bool = ...): ...
    @classmethod
    def get_asyncio(cls): ...
    @classmethod
    def set_main(cls, instance, set_compat: bool = ...): ...
    @classmethod
    def unset_main(cls, set_compat: bool = ...): ...
    @classmethod
    def patch_asyncio(cls): ...
    @classmethod
    def waitpid(cls, pid): ...
    def destroy(self): ...
    def call_safe(self, callable, args: list = ..., kwargs: dict = ...): ...
    def wait_event(self, callable, name: Incomplete | None = ...): ...
    def unwait_event(self, callable, name: Incomplete | None = ...): ...
    def delay(self, callable, timeout: Incomplete | None = ..., immediately: bool = ..., verify: bool = ..., safe: bool = ...): ...
    def delay_s(self, callable, timeout: Incomplete | None = ..., immediately: bool = ..., verify: bool = ..., wakeup: bool = ...): ...
    def delay_m(self): ...
    def ensure(self, coroutine, args: list = ..., kwargs: dict = ..., thread: Incomplete | None = ..., future: Incomplete | None = ..., immediately: bool = ...): ...
    def resolve_hostname(self, hostname, type: str = ...): ...
    def run_forever(self): ...
    def run_coroutine(self, coroutine, args: list = ..., kwargs: dict = ..., thread: Incomplete | None = ..., close: Incomplete | None = ...): ...
    def wakeup(self, force: bool = ...): ...
    def sleep(self, timeout, future: Incomplete | None = ...): ...
    def wait(self, event, timeout: Incomplete | None = ..., future: Incomplete | None = ...): ...
    def notify(self, event, data: Incomplete | None = ...): ...
    def load(self, full: bool = ...): ...
    def unload(self, full: bool = ...): ...
    def boot(self): ...
    def welcome(self): ...
    def load_logging(self, level: int = ..., format: str = ..., unique: bool = ...): ...
    def unload_logging(self, safe: bool = ...): ...
    def extra_logging(self, level, formatter): ...
    def level_logging(self, level): ...
    def load_diag(self, env: bool = ...): ...
    def load_middleware(self, suffix: str = ...): ...
    def unload_middleware(self): ...
    def register_middleware(self, middleware_c, *args, **kwargs): ...
    def call_middleware(self, name, *args, **kwargs): ...
    def bind_signals(self, signals: tuple = ..., handler: Incomplete | None = ...): ...
    def unbind_signals(self, signals: tuple = ...): ...
    def bind_env(self): ...
    def forever(self, env: bool = ...): ...
    def start(self): ...
    def stop(self): ...
    def pause(self): ...
    def resume(self): ...
    def close(self): ...
    def finish(self): ...
    def main(self): ...
    def is_main(self): ...
    def is_running(self): ...
    def is_started(self): ...
    def is_stopped(self): ...
    def is_paused(self): ...
    def is_edge(self): ...
    def is_empty(self): ...
    def is_sub_read(self, socket): ...
    def is_sub_write(self, socket): ...
    def is_sub_error(self, socket): ...
    def sub_all(self, socket): ...
    def unsub_all(self, socket): ...
    def sub_read(self, socket): ...
    def sub_write(self, socket): ...
    def sub_error(self, socket): ...
    def unsub_read(self, socket): ...
    def unsub_write(self, socket): ...
    def unsub_error(self, socket): ...
    def cleanup(self, destroy: bool = ...): ...
    def loop(self): ...
    def block(self): ...
    def fork(self, timeout: int = ...): ...
    def finalize(self): ...
    def ticks(self): ...
    def reads(self, reads, state: bool = ...): ...
    def writes(self, writes, state: bool = ...): ...
    def errors(self, errors, state: bool = ...): ...
    def datagram(self, family: socket.AddressFamily = ..., type: socket.SocketKind = ..., local_host: Incomplete | None = ..., local_port: Incomplete | None = ..., remote_host: Incomplete | None = ..., remote_port: Incomplete | None = ..., callback: Incomplete | None = ...): ...
    def connect(self, host, port, receive_buffer: Incomplete | None = ..., send_buffer: Incomplete | None = ..., ssl: bool = ..., key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., ssl_verify: bool = ..., family: socket.AddressFamily = ..., type: socket.SocketKind = ..., callback: Incomplete | None = ..., env: bool = ...): ...
    def acquire(self, connection): ...
    def pregister(self, pool): ...
    def punregister(self, pool): ...
    def pcallback(self, event, socket, pool): ...
    def nensure(self): ...
    def nstart(self): ...
    def nstop(self): ...
    def tensure(self): ...
    def tstart(self): ...
    def tstop(self): ...
    def texecute(self, callable, args: list = ..., kwargs: dict = ..., callback: Incomplete | None = ...): ...
    def files(self): ...
    def fopen(self, *args, **kwargs): ...
    def fclose(self, *args, **kwargs): ...
    def fread(self, *args, **kwargs): ...
    def fwrite(self, *args, **kwargs): ...
    def fensure(self): ...
    def fstart(self): ...
    def fstop(self): ...
    def on_connection_c(self, connection): ...
    def on_connection_d(self, connection): ...
    def on_stream_c(self, stream): ...
    def on_stream_d(self, stream): ...
    def on_fork(self): ...
    def on_join(self): ...
    def on_child(self, pipe: Incomplete | None = ...): ...
    def on_command(self, command): ...
    def on_diag(self): ...
    def on_start(self): ...
    def on_stop(self): ...
    def on_pause(self): ...
    def on_resume(self): ...
    def on_read(self, _socket): ...
    def on_write(self, _socket): ...
    def on_error(self, _socket): ...
    def on_exception(self, exception, connection): ...
    def on_expected(self, exception, connection): ...
    def on_connect(self, connection): ...
    def on_upgrade(self, connection): ...
    def on_client_ssl(self, connection): ...
    def on_acquire(self, connection): ...
    def on_acquire_base(self, connection): ...
    def on_release(self, connection): ...
    def on_release_base(self, connection): ...
    def on_data(self, connection, data): ...
    def on_data_base(self, connection, data): ...
    def info_dict(self, full: bool = ...): ...
    def info_string(self, full: bool = ..., safe: bool = ...): ...
    def connections_dict(self, full: bool = ...): ...
    def connection_dict(self, id, full: bool = ...): ...
    def build_connection(self, socket, address: Incomplete | None = ..., datagram: bool = ..., ssl: bool = ...): ...
    def base_connection(self, *args, **kwargs): ...
    def new_connection(self, connection): ...
    def del_connection(self, connection): ...
    def add_callback(self, socket, callback): ...
    def remove_callback(self, socket, callback): ...
    def load_config(self, path: str = ..., **kwargs): ...
    def apply_config(self, path, kwargs): ...
    def exec_safe(self, connection, callable, *args, **kwargs): ...
    def is_devel(self): ...
    def is_debug(self): ...
    def is_info(self): ...
    def is_warning(self): ...
    def is_error(self): ...
    def is_critical(self): ...
    def debug(self, object): ...
    def info(self, object): ...
    def warning(self, object): ...
    def error(self, object): ...
    def critical(self, object): ...
    def log_stack(self, method: Incomplete | None = ..., info: bool = ...): ...
    def log_info(self, method: Incomplete | None = ...): ...
    def log(self, *args, **kwargs): ...
    def log_python_3(self, object, level: int = ...): ...
    def log_python_2(self, object, level: int = ...): ...
    def build_poll(self): ...
    def build_future(self, compat: bool = ..., asyncio: bool = ...): ...
    def get_id(self, unique: bool = ...): ...
    def get_poll(self): ...
    def get_poll_name(self): ...
    def get_state(self): ...
    def set_state(self, state): ...
    def get_state_s(self, lower: bool = ...): ...
    def get_env(self, name, default: Incomplete | None = ..., cast: Incomplete | None = ..., expand: bool = ...): ...
    def expand(self, value, encoding: str = ..., force: bool = ...): ...
    def get_protocols(self): ...
    def get_adapter(self, name: str = ..., *args, **kwargs): ...
    def get_auth(self, name: str = ..., *args, **kwargs): ...
    def get_connection(self, socket): ...
    def _pending(self, connection): ...
    def _notifies(self): ...
    def _delays(self): ...
    def _generate(self, hashed: bool = ...): ...
    def _connect(self, connection): ...
    def _connectf(self, connection): ...
    def _socket_keepalive(self, _socket, timeout: Incomplete | None = ..., interval: Incomplete | None = ..., count: Incomplete | None = ...): ...
    def _ssl_init(self, strict: bool = ..., env: bool = ...): ...
    def _ssl_destroy(self): ...
    def _ssl_callback(self, socket, hostname, context): ...
    def _ssl_ctx(self, values, context: Incomplete | None = ..., secure: int = ..., context_options: list = ...): ...
    def _ssl_ctx_base(self, context, secure: int = ..., context_options: list = ...): ...
    def _ssl_ctx_protocols(self, context): ...
    def _ssl_ctx_alpn(self, context): ...
    def _ssl_ctx_npn(self, context): ...
    def _ssl_certs(self, context, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., verify_mode: ssl.VerifyMode = ..., check_hostname: bool = ...): ...
    def _ssl_upgrade(self, _socket, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., server: bool = ..., ssl_verify: bool = ..., server_hostname: Incomplete | None = ...): ...
    def _ssl_wrap(self, _socket, key_file: Incomplete | None = ..., cer_file: Incomplete | None = ..., ca_file: Incomplete | None = ..., ca_root: bool = ..., server: bool = ..., ssl_verify: bool = ..., server_hostname: Incomplete | None = ...): ...
    def _ssl_handshake(self, connection): ...
    def _ssl_client_handshake(self, connection): ...
    def _expand_destroy(self): ...
    def _level(self, level): ...
    def _format_delta(self, time_delta, count: int = ...): ...
    def _wait_forever(self, sleep: int = ...): ...
    @property
    def is_parent(self): ...
    @property
    def is_child(self): ...
    @property
    def is_forked(self): ...

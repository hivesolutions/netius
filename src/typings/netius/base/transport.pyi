import netius.base.errors as errors
import netius.base.observer
import netius.base.observer as observer
from _typeshed import Incomplete

__version__: str
__revision__: str
__date__: str

class Transport(netius.base.observer.Observable):
    def __init__(self, loop, connection, open: bool = ...) -> None: ...
    def open(self): ...
    def close(self): ...
    def abort(self): ...
    def write(self, data): ...
    def sendto(self, data, addr: Incomplete | None = ...): ...
    def get_extra_info(self, name, default: Incomplete | None = ...): ...
    def get_write_buffer_size(self): ...
    def get_write_buffer_limits(self): ...
    def set_handlers(self): ...
    def set_write_buffer_limits(self, high: Incomplete | None = ..., low: Incomplete | None = ...): ...
    def set_extra_dict(self): ...
    def get_protocol(self): ...
    def set_protocol(self, protocol): ...
    def is_closing(self): ...
    def _on_data(self, connection, data): ...
    def _on_close(self, connection): ...
    def _set_compat(self, protocol): ...
    def _set_binds(self): ...
    def _set_protocol(self, protocol, mark: bool = ...): ...
    def _buffer_touched(self, connection): ...
    def _handle_flow(self): ...
    def _cleanup(self): ...
    def _call_connection_lost(self, context): ...
    def _call_soon(self, callback, *args): ...

class TransportDatagram(Transport):
    def _on_data(self, connection, data): ...
    def _on_close(self, connection): ...

class TransportStream(Transport):
    def _on_data(self, connection, data): ...
    def _on_close(self, connection): ...

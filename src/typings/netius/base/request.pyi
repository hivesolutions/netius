import netius.base.errors as errors
from _typeshed import Incomplete
from typing import ClassVar

__version__: str
__revision__: str
__date__: str
REQUEST_TIMEOUT: float

class Request:
    IDENTIFIER: ClassVar[int] = ...
    def __init__(self, timeout: float = ..., callback: Incomplete | None = ...) -> None: ...
    @classmethod
    def _generate_id(cls): ...

class Response:
    def __init__(self, data, request: Incomplete | None = ...) -> None: ...
    def parse(self): ...
    def get_request(self): ...
    def get_id(self): ...

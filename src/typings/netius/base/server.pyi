"""
This type stub file was generated by pyright.
"""

from .conn import *
from .common import *

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
BUFFER_SIZE_S = ...
BUFFER_SIZE_C = ...
class Server(Base):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def welcome(self): # -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def info_dict(self, full=...): # -> dict[str, str | Any]:
        ...
    
    def serve(self, host=..., port=..., type=..., ipv6=..., ssl=..., key_file=..., cer_file=..., ca_file=..., ca_root=..., ssl_verify=..., ssl_host=..., ssl_fingerprint=..., ssl_dump=..., setuid=..., backlog=..., load=..., start=..., env=...):
        ...
    
    def socket_tcp(self, ssl=..., key_file=..., cer_file=..., ca_file=..., ca_root=..., ssl_verify=..., family=..., type=...): # -> SSLSocket | socket:
        ...
    
    def socket_udp(self, family=..., type=...): # -> socket:
        ...
    
    def on_serve(self): # -> None:
        ...
    


class DatagramServer(Server):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def reads(self, reads, state=...): # -> None:
        ...
    
    def writes(self, writes, state=...): # -> None:
        ...
    
    def errors(self, errors, state=...): # -> None:
        ...
    
    def serve(self, type=..., *args, **kwargs): # -> None:
        ...
    
    def on_read(self, _socket):
        ...
    
    def on_write(self, _socket): # -> None:
        ...
    
    def on_error(self, _socket): # -> None:
        ...
    
    def on_exception(self, exception): # -> None:
        ...
    
    def on_expected(self, exception): # -> None:
        ...
    
    def on_data(self, address, data): # -> None:
        ...
    
    def ensure_write(self): # -> tuple[Any | Literal[-1, 0], int, Any, int, list[bool]] | Orderable | None:
        ...
    
    def remove_write(self): # -> None:
        ...
    
    def enable_read(self): # -> None:
        ...
    
    def disable_read(self): # -> None:
        ...
    
    def send(self, data, address, delay=..., callback=...): # -> None:
        ...
    


class StreamServer(Server):
    def reads(self, reads, state=...): # -> None:
        ...
    
    def writes(self, writes, state=...): # -> None:
        ...
    
    def errors(self, errors, state=...): # -> None:
        ...
    
    def serve(self, type=..., *args, **kwargs): # -> None:
        ...
    
    def on_read_s(self, _socket): # -> None:
        ...
    
    def on_write_s(self, _socket): # -> None:
        ...
    
    def on_error_s(self, _socket): # -> None:
        ...
    
    def on_read(self, _socket):
        ...
    
    def on_write(self, _socket): # -> None:
        ...
    
    def on_error(self, _socket): # -> None:
        ...
    
    def on_exception(self, exception, connection): # -> None:
        ...
    
    def on_exception_s(self, exception): # -> None:
        ...
    
    def on_expected(self, exception, connection): # -> None:
        ...
    
    def on_expected_s(self, exception): # -> None:
        ...
    
    def on_upgrade(self, connection): # -> None:
        ...
    
    def on_ssl(self, connection): # -> None:
        ...
    
    def on_data(self, connection, data): # -> None:
        ...
    
    def on_socket_c(self, socket_c, address): # -> None:
        ...
    
    def on_socket_d(self, socket_c): # -> None:
        ...
    



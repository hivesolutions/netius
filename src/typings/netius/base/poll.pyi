"""
This type stub file was generated by pyright.
"""

__author__ = ...
__version__ = ...
__revision__ = ...
__date__ = ...
__copyright__ = ...
__license__ = ...
POLL_TIMEOUT = ...
class Poll:
    """
    The top level abstract implementation of a poll object
    should be used for inheritance and reference on the
    various methods that are part of the api.
    """
    def __init__(self) -> None:
        ...
    
    @classmethod
    def name(cls): # -> str:
        ...
    
    @classmethod
    def test(cls): # -> Literal[True]:
        ...
    
    def open(self, timeout=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def poll(self): # -> list[Any]:
        ...
    
    def poll_owner(self): # -> dict[Any, Any]:
        ...
    
    def is_open(self): # -> bool:
        ...
    
    def is_edge(self): # -> Literal[False]:
        ...
    
    def is_empty(self): # -> bool:
        ...
    
    def sub_all(self, socket, owner=...): # -> None:
        ...
    
    def unsub_all(self, socket): # -> None:
        ...
    
    def is_sub_read(self, socket): # -> bool:
        ...
    
    def is_sub_write(self, socket): # -> bool:
        ...
    
    def is_sub_error(self, socket): # -> bool:
        ...
    
    def sub_read(self, socket, owner=...): # -> None:
        ...
    
    def sub_write(self, socket, owner=...): # -> None:
        ...
    
    def sub_error(self, socket, owner=...): # -> None:
        ...
    
    def unsub_read(self, socket): # -> None:
        ...
    
    def unsub_write(self, socket): # -> None:
        ...
    
    def unsub_error(self, socket): # -> None:
        ...
    


class EpollPoll(Poll):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def test(cls): # -> bool:
        ...
    
    def open(self, timeout=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def poll(self): # -> tuple[list[Any], list[Any], list[Any]]:
        ...
    
    def is_edge(self): # -> Literal[True]:
        ...
    
    def sub_read(self, socket, owner=...): # -> None:
        ...
    
    def sub_write(self, socket, owner=...): # -> None:
        ...
    
    def sub_error(self, socket, owner=...): # -> None:
        ...
    
    def unsub_read(self, socket): # -> None:
        ...
    
    def unsub_write(self, socket): # -> None:
        ...
    
    def unsub_error(self, socket): # -> None:
        ...
    


class KqueuePoll(Poll):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def test(cls): # -> bool:
        ...
    
    def open(self, timeout=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def poll(self): # -> tuple[list[Any], list[Any], list[Any]]:
        ...
    
    def is_edge(self): # -> Literal[True]:
        ...
    
    def sub_read(self, socket, owner=...): # -> None:
        ...
    
    def sub_write(self, socket, owner=...): # -> None:
        ...
    
    def sub_error(self, socket, owner=...): # -> None:
        ...
    
    def unsub_read(self, socket): # -> None:
        ...
    
    def unsub_write(self, socket): # -> None:
        ...
    
    def unsub_error(self, socket): # -> None:
        ...
    


class PollPoll(Poll):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def test(cls): # -> bool:
        ...
    
    def open(self, timeout=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def poll(self): # -> tuple[list[Any], list[Any], list[Any]]:
        ...
    
    def is_edge(self): # -> Literal[False]:
        ...
    
    def sub_read(self, socket, owner=...): # -> None:
        ...
    
    def sub_write(self, socket, owner=...): # -> None:
        ...
    
    def sub_error(self, socket, owner=...): # -> None:
        ...
    
    def unsub_read(self, socket): # -> None:
        ...
    
    def unsub_write(self, socket): # -> None:
        ...
    
    def unsub_error(self, socket): # -> None:
        ...
    


class SelectPoll(Poll):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def open(self, timeout=...): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def poll(self): # -> tuple[list[Any], list[Any], list[Any]]:
        ...
    
    def is_edge(self): # -> Literal[False]:
        ...
    
    def sub_read(self, socket, owner=...): # -> None:
        ...
    
    def sub_write(self, socket, owner=...): # -> None:
        ...
    
    def sub_error(self, socket, owner=...): # -> None:
        ...
    
    def unsub_read(self, socket): # -> None:
        ...
    
    def unsub_write(self, socket): # -> None:
        ...
    
    def unsub_error(self, socket): # -> None:
        ...
    



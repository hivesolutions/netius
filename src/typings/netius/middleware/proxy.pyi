import netius as netius
import netius.middleware.base
from netius.middleware.base import Middleware as Middleware
from typing import ClassVar

__version__: str
__revision__: str
__date__: str

class ProxyMiddleware(netius.middleware.base.Middleware):
    MAX_LENGTH: ClassVar[int] = ...
    HEADER_LENGTH_V2: ClassVar[int] = ...
    HEADER_MAGIC_V2: ClassVar[bytes] = ...
    TYPE_LOCAL_V2: ClassVar[int] = ...
    TYPE_PROXY_V2: ClassVar[int] = ...
    AF_UNSPEC_v2: ClassVar[int] = ...
    AF_INET_v2: ClassVar[int] = ...
    AF_INET6_v2: ClassVar[int] = ...
    AF_UNIX_v2: ClassVar[int] = ...
    PROTO_UNSPEC_v2: ClassVar[int] = ...
    PROTO_STREAM_v2: ClassVar[int] = ...
    PROTO_DGRAM_v2: ClassVar[int] = ...
    def __init__(self, owner, version: int = ...) -> None: ...
    def start(self): ...
    def stop(self): ...
    def on_connection_c(self, owner, connection): ...
    def _proxy_handshake_v1(self, connection): ...
    def _proxy_handshake_v2(self, connection): ...
    def _read_safe(self, connection, buffer, count): ...
